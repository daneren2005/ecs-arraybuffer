{"version":3,"file":"js/simple.1f336dd2.js","mappings":"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","sources":["webpack://ecs-arraybuffer/./src/simple/entities/entity.ts","webpack://ecs-arraybuffer/./src/simple/entities/ship.ts","webpack://ecs-arraybuffer/./src/simple/entities/station.ts","webpack://ecs-arraybuffer/./src/simple/entities/world.ts","webpack://ecs-arraybuffer/./node_modules/vue-loader/dist/index.js","webpack://ecs-arraybuffer/./src/simple/SimpleGame.vue"],"sourcesContent":["import { EventEmitter } from 'eventemitter3';\nimport World from './world';\n\nexport default class Entity extends EventEmitter {\n\tworld: World;\n\n\tid: number;\n\tx = 0;\n\ty = 0;\n\twidth = 0;\n\theight = 0;\n\tangle = 0;\n\tvelocityX = 0;\n\tvelocityY = 0;\n\ttype = 'entity';\n\tkey = 'boid';\n\tshields = 1;\n\tmaxShields = 1;\n\ttimeToRegenerateShields = 1;\n\ttimeSinceShieldRegeneration = 0;\n\ttimeSinceTakenDamage = 0;\n\tdead = false;\n\n\tconstructor(world: World) {\n\t\tsuper();\n\n\t\tthis.world = world;\n\t\tthis.id = world.getId();\n\t}\n\n\tload(config: any) {\n\t\tObject.keys(config).forEach((key: string) => {\n\t\t\t// @ts-expect-error\n\t\t\tthis[key] = config[key];\n\t\t});\n\t}\n\n\tupdate(delta: number) {\n\t\tthis.set('x', this.x + this.velocityX * delta);\n\t\tthis.set('y', this.y + this.velocityY * delta);\n\t\tthis.set('timeSinceTakenDamage', this.timeSinceTakenDamage + delta);\n\n\t\tif(this.shields < this.maxShields) {\n\t\t\tthis.set('timeSinceShieldRegeneration', this.timeSinceShieldRegeneration + delta);\n\t\t\tif(this.timeSinceShieldRegeneration > this.timeToRegenerateShields) {\n\t\t\t\tthis.set('shields', this.shields + 1);\n\t\t\t\tthis.set('timeSinceShieldRegeneration', 0);\n\t\t\t}\n\t\t}\n\t}\n\n\tset(prop: string, value: any) {\n\t\t// @ts-expect-error\n\t\tthis[prop] = value;\n\t\tthis.emit(`${prop}-updated`, value);\n\t}\n\n\tdie() {\n\t\t// Only emit dead once\n\t\tif(this.dead) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dead = true;\n\t\tthis.emit('dead');\n\t}\n\tcanTakeDamage() {\n\t\treturn this.timeSinceTakenDamage >= 0.2;\n\t}\n\ttakeDamage(damage: number) {\n\t\tif(!this.canTakeDamage()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.set('shields', this.shields - damage);\n\t\tthis.set('timeSinceTakenDamage', 0);\n\t\tif(this.shields < 0) {\n\t\t\tthis.die();\n\t\t}\n\t}\n}","import computeAngle from '@/math/compute-angle';\nimport distance from '@/math/distance';\nimport euclideanDistance from '@/math/euclidean-distance';\nimport Entity from './entity';\nimport Station from './station';\nconst PhaserMath = require('phaser/src/math');\n\nexport default class Ship extends Entity {\n\tstation: Station;\n\tspeed = 100;\n\n\tconstructor(station: Station) {\n\t\tsuper(station.world);\n\t\tthis.station = station;\n\t\tthis.width = 10;\n\t\tthis.height = 5;\n\t}\n\n\tget color(): number {\n\t\treturn this.station.color;\n\t}\n\n\tupdate(delta: number) {\n\t\tthis.keepInBounds();\n\n\t\tlet nearesetEnemy = this.getNearestEnemy();\n\t\tif(nearesetEnemy) {\n\t\t\t// Bounce off enemy doing damage\n\t\t\tif(distance(nearesetEnemy.x, nearesetEnemy.y, this.x, this.y) < Math.max(this.width, nearesetEnemy.width)) {\n\t\t\t\tthis.collide(nearesetEnemy);\n\t\t\t\tthis.set('velocityX', -this.velocityX);\n\t\t\t\tthis.set('velocityY', -this.velocityY);\n\t\t\t}\n\t\t\t// Move towards enemy\n\t\t\telse {\n\t\t\t\tlet force = this.getMoveTowardsForce(nearesetEnemy);\n\t\t\t\tlet newVelocity = new PhaserMath.Vector2(this.velocityX + force.x * 4, this.velocityY + force.y * 4);\n\t\t\t\tnewVelocity.normalize();\n\n\t\t\t\tthis.set('velocityX', newVelocity.x * this.speed);\n\t\t\t\tthis.set('velocityY', newVelocity.y * this.speed);\n\n\t\t\t\tthis.set('angle', computeAngle(this.velocityX, this.velocityY));\n\t\t\t}\n\t\t}\n\n\t\t// TODO: This should not be needed, but somehow ships are staying alive even after station is destroyed\n\t\tif(this.station.dead) {\n\t\t\tthis.die();\n\t\t}\n\n\t\tsuper.update(delta);\n\t}\n\t\n\tkeepInBounds() {\n\t\tif(this.x < 0) {\n\t\t\tthis.set('velocityX', Math.abs(this.velocityX));\n\t\t} else if(this.x > this.world.bounds.width) {\n\t\t\tthis.set('velocityX', -Math.abs(this.velocityX));\n\t\t}\n\n\t\tif(this.y < 0) {\n\t\t\tthis.set('velocityY', Math.abs(this.velocityY));\n\t\t} else if(this.y > this.world.bounds.height) {\n\t\t\tthis.set('velocityY', -Math.abs(this.velocityY));\n\t\t}\n\t}\n\n\tgetNearestEnemy(): Entity | null {\n\t\tlet nearesetEnemy = this.world.getNearestEntity(this, entity => {\n\t\t\tif(entity instanceof Station) {\n\t\t\t\treturn entity !== this.station;\n\t\t\t} else if(entity instanceof Ship) {\n\t\t\t\treturn entity.station !== this.station;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tif(nearesetEnemy) {\n\t\t\treturn nearesetEnemy;\n\t\t} else {\n\t\t\tlet stations = this.world.entities.filter(entity => entity instanceof Station && entity !== this.station);\n\t\t\tstations.sort((a, b) => {\n\t\t\t\treturn euclideanDistance(a.x, a.y, this.x, this.y) - euclideanDistance(b.x, b.y, this.x, this.y);\n\t\t\t});\n\n\t\t\treturn stations[0];\n\t\t}\n\t}\n\tgetMoveTowardsForce(entity: Entity) {\n\t\tlet force = new PhaserMath.Vector2(entity.x - this.x, entity.y - this.y);\n\t\tforce.normalize();\n\t\treturn force;\n\t}\n\n\tcollide(target: Entity) {\n\t\tif(!this.canTakeDamage() || !target.canTakeDamage()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet enemyWorth = 1;\n\t\tif(target instanceof Station) {\n\t\t\tenemyWorth = target.ships.length;\n\t\t}\n\n\t\tthis.takeDamage(1);\n\t\ttarget.takeDamage(1);\n\n\t\tif(target.dead) {\n\t\t\tthis.station.set('money', this.station.money + enemyWorth);\n\t\t}\n\t\tif(this.dead) {\n\t\t\tif(target instanceof Station) {\n\t\t\t\ttarget.set('money', target.money + 1);\n\t\t\t} else if(target instanceof Ship) {\n\t\t\t\ttarget.station.set('money', target.station.money + 1);\n\t\t\t}\n\t\t}\n\t}\n}","import Entity from './entity';\nimport Ship from './ship';\nimport World from './world';\n\nexport default class Station extends Entity {\n\tcolor = 0xff0000;\n\tships: Array<Entity> = [];\n\tmoney = 0;\n\n\tconstructor(world: World) {\n\t\tsuper(world);\n\t\tthis.key = 'station';\n\t\tthis.width = 20;\n\t\tthis.height = 20;\n\t\tthis.shields = 2;\n\t\tthis.maxShields = 2;\n\t\tthis.timeToRegenerateShields = 5;\n\t}\n\n\tupdate(delta: number) {\n\t\tsuper.update(delta);\n\n\t\tif(this.money > 0) {\n\t\t\tlet ship = new Ship(this);\n\t\t\tship.x = this.x;\n\t\t\tship.y = this.y;\n\t\t\tship.velocityX = (Math.random() > 0.5 ? -1 : 1) * Math.random() * ship.speed;\n\t\t\tship.velocityY = (Math.random() > 0.5 ? -1 : 1) * Math.random() * ship.speed;\n\n\t\t\tthis.ships.push(ship);\n\t\t\tship.on('dead', () => {\n\t\t\t\tlet index = this.ships.indexOf(ship);\n\t\t\t\tif(index >= 0) {\n\t\t\t\t\tthis.ships.splice(index, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.world.addEntity(ship);\n\t\t\tthis.set('money', this.money - 1);\n\t\t}\n\t}\n\n\tdie() {\n\t\tsuper.die();\n\n\t\tthis.ships.forEach(ship => {\n\t\t\tship.die();\n\t\t});\n\t}\n}","import { EventEmitter } from 'eventemitter3';\nimport Entity from './entity';\nimport Station from './station';\nimport { Quadtree, Rectangle } from '@timohausmann/quadtree-ts/src/index.esm';\nimport euclideanDistance from '@/math/euclidean-distance';\n\nexport default class World extends EventEmitter {\n\tentities: Array<Entity> = [];\n\tbounds: {\n\t\twidth: number,\n\t\theight: number\n\t} = { width: 0, height: 0 };\n\tidCounter = 0;\n\t// @ts-expect-error\n\tquadtree: Quadtree;\n\n\tload(config: any) {\n\t\tconfig.entities.forEach((entityConfig: any) => {\n\t\t\tlet entity;\n\t\t\tswitch(entityConfig.type) {\n\t\t\t\tcase 'station':\n\t\t\t\t\tentity = new Station(this);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tentity = new Entity(this);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tentity.load(entityConfig);\n\t\t\tthis.addEntity(entity);\n\t\t});\n\n\t\tif(config.bounds) {\n\t\t\tthis.bounds = config.bounds;\n\t\t}\n\t}\n\taddEntity(entity: Entity) {\n\t\tthis.entities.push(entity);\n\t\tentity.on('dead', () => {\n\t\t\tthis.removeEntity(entity);\n\t\t});\n\t\tthis.emit('entity-added', entity);\n\t}\n\tremoveEntity(entity: Entity) {\n\t\tlet index = this.entities.indexOf(entity);\n\t\tif(index !== -1) {\n\t\t\tthis.entities.splice(index, 1);\n\t\t}\n\t}\n\n\tupdate(delta: number) {\n\t\tthis.quadtree = new Quadtree({\n\t\t\twidth: this.bounds.width,\n\t\t\theight: this.bounds.height\n\t\t});\n\t\tthis.entities.forEach(entity => {\n\t\t\tthis.quadtree.insert(new Rectangle({\n\t\t\t\tx: entity.x,\n\t\t\t\ty: entity.y,\n\t\t\t\twidth: entity.width,\n\t\t\t\theight: entity.height,\n\t\t\t\tdata: {\n\t\t\t\t\tentity\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tthis.entities.forEach(entity => {\n\t\t\tif(entity.dead) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tentity.update(delta);\n\t\t});\n\t}\n\n\tgetNearestEntity(entity: Entity, filter: (entity: Entity) => boolean) {\n\t\tlet rect = {\n\t\t\tx: entity.x - 50,\n\t\t\ty: entity.y - 50,\n\t\t\twidth: entity.width + 100,\n\t\t\theight: entity.height + 100\n\t\t};\n\n\t\t// TODO: At the beginning this is slow because we are in a clump of our own units so it returns a lot of results without any enemies\n\t\tlet entities = this.getEntitiesInRange(rect).filter(otherEntity => otherEntity !== entity && !otherEntity.dead && filter(otherEntity));\n\t\tif(entities.length === 0) {\n\t\t\trect.x -= 100;\n\t\t\trect.y -= 100;\n\t\t\trect.width += 200;\n\t\t\trect.height += 200;\n\t\t\tentities = this.getEntitiesInRange(rect).filter(otherEntity => otherEntity !== entity && filter(otherEntity));\n\t\t}\n\n\t\tentities.sort((a, b) => {\n\t\t\treturn euclideanDistance(a.x, a.y, entity.x, entity.y) - euclideanDistance(b.x, b.y, entity.x, entity.y);\n\t\t});\n\t\treturn entities[0] ?? null;\n\t}\n\tgetEntitiesInRange(range: { x: number, y: number, width: number, height: number }): Array<Entity> {\n\t\treturn this.quadtree.retrieve(new Rectangle(range)).map((result: any) => result.data.entity);\n\t}\n\n\tgetId() {\n\t\tthis.idCounter++;\n\t\treturn this.idCounter;\n\t}\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-12587e64\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"home\" }\nconst _hoisted_2 = { class: \"list\" }\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { id: \"phaser-container-simple\" }, null, -1))\n\nimport { ref, onMounted, onBeforeUnmount, Ref } from 'vue';\nimport Phaser from 'phaser';\nimport World from './entities/world';\nimport Entity from './entities/entity';\nimport generateScene from '@/data/generate-scene';\nimport Station from './entities/station';\nimport Ship from './entities/ship';\n\n\nexport default /*#__PURE__*/_defineComponent({\n  setup(__props) {\n\nlet world = new World();\nconst startupTime = ref(0);\nconst minUpdateTime = ref(0);\nconst maxUpdateTime = ref(0);\nconst avgUpdateTime = ref(0);\nconst stationsCount = ref(0);\nconst shipsCount = ref(0);\nconst stationShips = ref([]) as Ref<Array<{ color: number, displayColor: string, ships: number }>>;\n\nlet game: Phaser.Game | null;\nonMounted(() => {\n\tlet updateTicks = 0;\n\tlet updateTimes: Array<number> = [];\n\n\tconst width = window.innerWidth / 3 * 2;\n\tconst height = window.innerHeight / 3 * 2;\n\tlet paused = false;\n\tgame = new Phaser.Game({\n\t\ttype: Phaser.AUTO,\n\t\twidth,\n\t\theight,\n\t\tparent: 'phaser-container-simple',\n\t\t// @ts-expect-error\n\t\tscene: {\n\t\t\tpreload() {\n\t\t\t\tthis.load.image('boid', 'boid.png');\n\t\t\t\tthis.load.image('station', 'station.png');\n\t\t\t\tthis.load.image('shield', 'shield3.png');\n\t\t\t},\n\t\t\tcreate() {\n\t\t\t\tworld.on('entity-added', (entity: Entity) => {\n\t\t\t\t\tlet image = this.add.image(entity.x, entity.y, entity.key) as any;\n\t\t\t\t\timage.setScale(entity.width / image.width, entity.height / image.height);\n\t\t\t\t\timage.shieldImage = this.add.image(entity.x, entity.y, 'shield');\n\t\t\t\t\timage.shieldImage.setScale(entity.width / image.shieldImage.width * 2, entity.height / image.shieldImage.height * 2);\n\t\t\t\t\timage.shieldImage.visible = entity.shields > 0;\n\t\t\t\t\tif(entity instanceof Station || entity instanceof Ship) {\n\t\t\t\t\t\timage.setTint(entity.color);\n\t\t\t\t\t}\n\n\t\t\t\t\t['x', 'y', 'angle'].forEach(prop => {\n\t\t\t\t\t\tentity.on(`${prop}-updated`, (newValue: any) => {\n\t\t\t\t\t\t\timage[prop] = newValue;\n\t\t\t\t\t\t\timage.shieldImage[prop] = newValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tentity.on('dead', () => {\n\t\t\t\t\t\timage.destroy();\n\t\t\t\t\t\timage.shieldImage.destroy();\n\t\t\t\t\t});\n\t\t\t\t\tentity.on('shields-updated', (newValue: number) => {\n\t\t\t\t\t\timage.shieldImage.visible = newValue > 0;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tlet start = performance.now();\n\t\t\t\tworld.load(generateScene({\n\t\t\t\t\tstations: 6,\n\t\t\t\t\tshipsPerStation: 100,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}));\n\t\t\t\tlet end = performance.now();\n\t\t\t\tstartupTime.value = end - start;\n\n\t\t\t\tlet stations = world.entities.filter(entity => entity instanceof Station) as Array<Station>;\n\t\t\t\tstationShips.value = stations.map(station => {\n\t\t\t\t\tlet displayColor = '#' + station.color.toString(16);\n\t\t\t\t\tif(displayColor === '#ffffff') {\n\t\t\t\t\t\tdisplayColor = '#00000';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcolor: station.color,\n\t\t\t\t\t\tdisplayColor,\n\t\t\t\t\t\tships: station.ships.length\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tthis.input.keyboard.on('keydown-SPACE', () => {\n\t\t\t\t\tpaused = !paused;\n\t\t\t\t});\n\t\t\t},\n\t\t\tupdate(time: number, delta: number) {\n\t\t\t\tif(paused) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet start = performance.now();\n\t\t\t\tworld.update(delta / 1_000);\n\t\t\t\tlet end = performance.now();\n\n\t\t\t\tupdateTimes.push(end - start);\n\t\t\t\tupdateTicks += delta;\n\t\t\t\tif(updateTicks > 1_000) {\n\t\t\t\t\tminUpdateTime.value = updateTimes.reduce((min, time) => {\n\t\t\t\t\t\treturn Math.min(min, time);\n\t\t\t\t\t}, 1_000_000);\n\t\t\t\t\tmaxUpdateTime.value = updateTimes.reduce((max, time) => {\n\t\t\t\t\t\treturn Math.max(max, time);\n\t\t\t\t\t}, 0);\n\t\t\t\t\tavgUpdateTime.value = updateTimes.reduce((total, time) => {\n\t\t\t\t\t\treturn total + time;\n\t\t\t\t\t}, 0) / updateTimes.length;\n\t\t\t\t\tupdateTimes = [];\n\t\t\t\t\tupdateTicks = 0;\n\n\t\t\t\t\tstationsCount.value = world.entities.filter(entity => entity instanceof Station).length;\n\t\t\t\t\tshipsCount.value = world.entities.filter(entity => entity instanceof Ship).length;\n\n\t\t\t\t\tlet stations = world.entities.filter(entity => entity instanceof Station) as Array<Station>;\n\t\t\t\t\tstationShips.value.forEach(val => {\n\t\t\t\t\t\tlet matchingStation = stations.find(station => station.color === val.color);\n\t\t\t\t\t\tif(matchingStation) {\n\t\t\t\t\t\t\tval.ships = matchingStation.ships.length;\n\t\t\t\t\t\t} else if(val.ships > 0) {\n\t\t\t\t\t\t\t// paused = true;\n\t\t\t\t\t\t\tval.ships = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\nonBeforeUnmount(() => {\n\tif(game) {\n\t\tgame.destroy();\n\t\tgame = null;\n\t} \n});\n\nfunction addShips() {\n\tlet stations = world.entities.filter(entity => entity instanceof Station) as Array<Station>;\n\tstations.forEach(station => {\n\t\tstation.set('money', station.money + 10);\n\t});\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", null, \"Startup time: \" + _toDisplayString(startupTime.value.toFixed(2)) + \" ms\", 1),\n      _createElementVNode(\"div\", null, \"Update time: \" + _toDisplayString(minUpdateTime.value.toFixed(2)) + \" - \" + _toDisplayString(maxUpdateTime.value.toFixed(2)) + \" (\" + _toDisplayString(avgUpdateTime.value.toFixed(2)) + \" avg) ms\", 1),\n      _hoisted_3,\n      _createElementVNode(\"div\", null, \"Entities: \" + _toDisplayString(stationsCount.value) + \" stations and \" + _toDisplayString(shipsCount.value) + \" ships\", 1),\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(stationShips), (station) => {\n        return (_openBlock(), _createElementBlock(\"div\", {\n          key: station.color,\n          style: _normalizeStyle({ color: station.displayColor })\n        }, _toDisplayString('#' + station.color.toString(16)) + \": \" + _toDisplayString(station.ships), 5))\n      }), 128)),\n      _hoisted_4,\n      _createElementVNode(\"button\", { onClick: addShips }, \"Add Ships\")\n    ]),\n    _hoisted_5\n  ]))\n}\n}\n\n})","import script from \"./SimpleGame.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./SimpleGame.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./SimpleGame.vue?vue&type=style&index=0&id=12587e64&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/ecs-arraybuffer/ecs-arraybuffer/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-12587e64\"]])\n\nexport default __exports__"],"names":["Entity","EventEmitter","constructor","world","super","this","id","getId","load","config","Object","keys","forEach","key","update","delta","set","x","velocityX","y","velocityY","timeSinceTakenDamage","shields","maxShields","timeSinceShieldRegeneration","timeToRegenerateShields","prop","value","emit","die","dead","canTakeDamage","takeDamage","damage","PhaserMath","require","Ship","station","width","height","color","keepInBounds","nearesetEnemy","getNearestEnemy","distance","Math","max","collide","force","getMoveTowardsForce","newVelocity","Vector2","normalize","speed","computeAngle","abs","bounds","getNearestEntity","entity","Station","stations","entities","filter","sort","a","b","euclideanDistance","target","enemyWorth","ships","length","money","ship","random","push","on","index","indexOf","splice","addEntity","World","entityConfig","type","removeEntity","quadtree","Quadtree","insert","Rectangle","data","rect","getEntitiesInRange","otherEntity","range","retrieve","map","result","idCounter","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","_hoisted_2","_hoisted_3","_createElementVNode","_hoisted_4","_hoisted_5","_defineComponent","setup","__props","startupTime","ref","minUpdateTime","maxUpdateTime","avgUpdateTime","stationsCount","shipsCount","stationShips","game","addShips","onMounted","updateTicks","updateTimes","window","innerWidth","innerHeight","paused","Phaser","parent","scene","preload","image","create","add","setScale","shieldImage","visible","setTint","newValue","destroy","start","performance","now","generateScene","shipsPerStation","end","displayColor","toString","input","keyboard","time","reduce","min","total","val","matchingStation","find","onBeforeUnmount","_ctx","_cache","_openBlock","_createElementBlock","_toDisplayString","toFixed","_Fragment","_renderList","_unref","style","_normalizeStyle","onClick","__exports__"],"sourceRoot":""}