{"version":3,"file":"js/simple.7d8ee835.js","mappings":"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","sources":["webpack://ecs-arraybuffer/./node_modules/@timohausmann/quadtree-ts/src/Quadtree.ts","webpack://ecs-arraybuffer/./node_modules/@timohausmann/quadtree-ts/src/Rectangle.ts","webpack://ecs-arraybuffer/./src/math/distance.ts","webpack://ecs-arraybuffer/./src/math/euclidean-distance.ts","webpack://ecs-arraybuffer/./src/simple/entities/entity.ts","webpack://ecs-arraybuffer/./src/simple/entities/ship.ts","webpack://ecs-arraybuffer/./src/simple/entities/station.ts","webpack://ecs-arraybuffer/./src/simple/entities/world.ts","webpack://ecs-arraybuffer/./node_modules/vue-loader/dist/index.js","webpack://ecs-arraybuffer/./src/simple/SimpleGame.vue"],"sourcesContent":["import type { NodeGeometry, Indexable } from './types';\nimport type { Rectangle } from './Rectangle';\nimport type { Circle } from './Circle';\nimport type { Line } from './Line';\n\n/**\n * Quadtree Constructor Properties\n */\nexport interface QuadtreeProps {\n\n    /**\n     * Width of the node.\n     */\n    width: number\n\n    /**\n     * Height of the node.\n     */\n    height: number\n\n    /**\n     * X Offset of the node.\n     * @defaultValue `0`\n     */\n    x?: number\n\n    /**\n     * Y Offset of the node.\n     * @defaultValue `0`\n     */\n    y?: number\n\n    /**\n     * Max objects this node can hold before it splits.\n     * @defaultValue `10`\n     */\n    maxObjects?: number\n\n    /**\n     * Total max nesting levels of the root Quadtree node.\n     * @defaultValue `4`\n     */\n    maxLevels?: number\n}\n\n/**\n * Class representing a Quadtree node.\n * \n * @example\n * ```typescript\n * const tree = new Quadtree({\n *   width: 100,\n *   height: 100,\n *   x: 0,           // optional, default:  0\n *   y: 0,           // optional, default:  0\n *   maxObjects: 10, // optional, default: 10\n *   maxLevels: 4,   // optional, default:  4\n * });\n * ```\n * \n * @example Typescript: If you like to be explicit, you optionally can pass in a generic type for objects to be stored in the Quadtree:\n * ```typescript\n * class GameEntity extends Rectangle {\n *   ...\n * }\n * const tree = new Quadtree<GameEntity>({\n *   width: 100,\n *   height: 100,\n * });\n * ```\n */\nexport class Quadtree<ObjectsType extends Rectangle|Circle|Line|Indexable> {\n\n    /**\n     * The numeric boundaries of this node.\n     * @readonly\n     */\n    bounds: NodeGeometry;\n\n    /**\n     * Max objects this node can hold before it splits.\n     * @defaultValue `10`\n     * @readonly\n     */\n    maxObjects: number;\n    \n    /**\n     * Total max nesting levels of the root Quadtree node.\n     * @defaultValue `4`\n     * @readonly\n     */\n    maxLevels: number;\n\n    /**\n     * The level of this node.\n     * @defaultValue `0`\n     * @readonly\n     */\n    level: number;\n\n    /**\n     * Array of objects in this node.\n     * @defaultValue `[]`\n     * @readonly\n     */\n    objects: ObjectsType[];\n\n    /**\n     * Subnodes of this node\n     * @defaultValue `[]`\n     * @readonly\n     */\n    nodes: Quadtree<ObjectsType>[];\n\n    /**\n     * Quadtree Constructor\n     * @param props - bounds and properties of the node\n     * @param level - depth level (internal use only, required for subnodes)\n     */\n    constructor(props:QuadtreeProps, level=0) {\n        \n        this.bounds = { \n            x: props.x || 0, \n            y: props.y || 0, \n            width: props.width, \n            height: props.height,\n        };\n        this.maxObjects = (typeof props.maxObjects === 'number') ? props.maxObjects : 10;\n        this.maxLevels  = (typeof props.maxLevels === 'number') ? props.maxLevels : 4;\n        this.level      = level;\n        \n        this.objects = [];\n        this.nodes   = [];\n    }\n    \n    /**\n     * Get the quadrant (subnode indexes) an object belongs to.\n     * \n     * @example Mostly for internal use but you can call it like so:\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * const rectangle = new Rectangle({ x: 25, y: 25, width: 10, height: 10 });\n     * const indexes = tree.getIndex(rectangle);\n     * console.log(indexes); // [1]\n     * ```\n     * \n     * @param obj - object to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right).\n     */\n    getIndex(obj:ObjectsType): number[] {\n        return obj.qtIndex(this.bounds);\n    }\n\n    /**\n     * Split the node into 4 subnodes.\n     * @internal\n     * \n     * @example Mostly for internal use! You should only call this yourself if you know what you are doing:\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.split();\n     * console.log(tree); // now tree has four subnodes\n     * ```\n     */\n    split(): void {\n        \n        const level = this.level + 1,\n            width   = this.bounds.width/2,\n            height  = this.bounds.height/2,\n            x       = this.bounds.x,\n            y       = this.bounds.y;\n\n        const coords = [\n            { x: x + width, y: y },\n            { x: x,         y: y },\n            { x: x,         y: y + height },\n            { x: x + width, y: y + height },\n        ];\n\n        for(let i=0; i < 4; i++) {\n            this.nodes[i] = new Quadtree({\n                x: coords[i].x, \n                y: coords[i].y, \n                width,\n                height,\n                maxObjects: this.maxObjects,\n                maxLevels: this.maxLevels,\n            }, level);\n        }        \n    }\n\n\n    /**\n     * Insert an object into the node. If the node\n     * exceeds the capacity, it will split and add all\n     * objects to their corresponding subnodes.\n     * \n     * @example you can use any shape here (or object with a qtIndex method, see README):\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.insert(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));\n     * tree.insert(new Circle({ x: 25, y: 25, r: 10, data: 512 }));\n     * tree.insert(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));\n     * ```\n     * \n     * @param obj - Object to be added.\n     */\n    insert(obj:ObjectsType): void {\n        \n        //if we have subnodes, call insert on matching subnodes\n        if(this.nodes.length) {\n            const indexes = this.getIndex(obj);\n    \n            for(let i=0; i<indexes.length; i++) {\n                this.nodes[indexes[i]].insert(obj);\n            }\n            return;\n        }\n    \n        //otherwise, store object here\n        this.objects.push(obj);\n\n        //maxObjects reached\n        if(this.objects.length > this.maxObjects && this.level < this.maxLevels) {\n\n            //split if we don't already have subnodes\n            if(!this.nodes.length) {\n                this.split();\n            }\n            \n            //add all objects to their corresponding subnode\n            for(let i=0; i<this.objects.length; i++) {\n                const indexes = this.getIndex(this.objects[i]);\n                for(let k=0; k<indexes.length; k++) {\n                    this.nodes[indexes[k]].insert(this.objects[i]);\n                }\n            }\n\n            //clean up this node\n            this.objects = [];\n        }\n    }\n    \n    \n    /**\n     * Return all objects that could collide with the given geometry.\n     * \n     * @example Just like insert, you can use any shape here (or object with a qtIndex method, see README):\n     * ```typescript \n     * tree.retrieve(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));\n     * tree.retrieve(new Circle({ x: 25, y: 25, r: 10, data: 512 }));\n     * tree.retrieve(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));\n     * ```\n     * \n     * @param obj - geometry to be checked\n     * @returns Array containing all detected objects.\n     */\n    retrieve(obj:ObjectsType): ObjectsType[] {\n        \n        const indexes = this.getIndex(obj);\n        let returnObjects = this.objects;\n            \n        //if we have subnodes, retrieve their objects\n        if(this.nodes.length) {\n            for(let i=0; i<indexes.length; i++) {\n                returnObjects = returnObjects.concat(this.nodes[indexes[i]].retrieve(obj));\n            }\n        }\n\n        //remove duplicates\n        returnObjects = returnObjects.filter(function(item, index) {\n            return returnObjects.indexOf(item) >= index;\n        });\n    \n        return returnObjects;\n    }\n\n\n    /**\n     * Clear the Quadtree.\n     * \n     * @example\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.insert(new Circle({ x: 25, y: 25, r: 10 }));\n     * tree.clear();\n     * console.log(tree); // tree.objects and tree.nodes are empty\n     * ```\n     */\n    clear(): void {\n        \n        this.objects = [];\n    \n        for(let i=0; i < this.nodes.length; i++) {\n            if(this.nodes.length) {\n                this.nodes[i].clear();\n            }\n        }\n\n        this.nodes = [];\n    }\n}","import type { NodeGeometry, Indexable } from './types';\n\n/**\n * Rectangle Geometry\n * @beta\n * \n * @remarks\n * This interface simply represents a rectangle geometry.\n */\nexport interface RectangleGeometry {\n\n    /**\n     * X start of the rectangle (top left).\n     */\n    x: number\n\n    /**\n     * Y start of the rectangle (top left).\n     */\n    y: number\n\n    /**\n     * Width of the rectangle.\n     */\n    width: number\n\n    /**\n     * Height of the rectangle.\n     */\n    height: number\n}\n\n/**\n * Rectangle Constructor Properties\n * @beta\n * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n */\nexport interface RectangleProps<CustomDataType = void> extends RectangleGeometry {\n\n    /**\n     * Custom data\n     */\n    data?: CustomDataType\n}\n\n/**\n * Class representing a Rectangle\n * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n * \n * @example Without custom data (JS/TS):\n * ```typescript\n * const rectangle = new Rectangle({ \n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n * });\n * ```\n * \n * @example With custom data (JS/TS):\n * ```javascript\n * const rectangle = new Rectangle({ \n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n *   data: { \n *     name: 'Jane', \n *     health: 100,\n *   },\n * });\n * ```\n * \n * @example With custom data (TS):\n * ```typescript\n * interface ObjectData {\n *   name: string\n *   health: number\n * }\n * const entity: ObjectData = {\n *   name: 'Jane',\n *   health: 100,\n * };\n * \n * // Typescript will infer the type of the data property\n * const rectangle1 = new Rectangle({\n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n *   data: entity,\n * });\n * \n * // You can also pass in a generic type for the data property\n * const rectangle2 = new Rectangle<ObjectData>({ \n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n * });\n * rectangle2.data = entity;\n * ```\n * \n * @example With custom class extending Rectangle (implements {@link RectangleGeometry} (x, y, width, height)):\n * ```javascript\n * // extending inherits the qtIndex method\n * class Box extends Rectangle {\n *   \n *   constructor(props) {\n *     // call super to set x, y, width, height (and data, if given)\n *     super(props);\n *     this.content = props.content;\n *   }\n * }\n * \n * const box = new Box({\n *   content: 'Gravity Boots',\n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n * });\n * ```\n * \n * @example With custom class and mapping {@link RectangleGeometry}:\n * ```javascript\n * // no need to extend if you don't implement RectangleGeometry\n * class Box {\n *   \n *   constructor(content) {\n *     this.content = content;\n *     this.position = [10, 20];\n *     this.size = [30, 40];\n *   }\n *   \n *   // add a qtIndex method to your class\n *   qtIndex(node) {\n *     // map your properties to RectangleGeometry\n *     return Rectangle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       width: this.size[0],\n *       height: this.size[1],\n *     }, node);\n *   }\n * }\n * \n * const box = new Box('Gravity Boots');\n * ```\n * \n * @example With custom object that implements {@link RectangleGeometry}:\n * ```javascript\n * const player = {\n *   name: 'Jane', \n *   health: 100,\n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 30,\n *   qtIndex: Rectangle.prototype.qtIndex,\n * });\n * ```\n * \n * @example With custom object and mapping {@link RectangleGeometry}:\n * ```javascript\n * // Note: this is not recommended but possible. \n * // Using this technique, each object would have it's own qtIndex method. \n * // Rather add qtIndex to your prototype, e.g. by using classes like shown above.\n * const player = {\n *   name: 'Jane', \n *   health: 100,\n *   position: [10, 20], \n *   size: [30, 40], \n *   qtIndex: function(node) {\n *     return Rectangle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       width: this.size[0],\n *       height: this.size[1],\n *     }, node);\n *   },\n * });\n * ```\n */\nexport class Rectangle<CustomDataType = void> implements RectangleGeometry, Indexable {\n\n    /**\n     * X start of the rectangle (top left).\n     */\n    x: number;\n\n    /**\n     * Y start of the rectangle (top left).\n     */\n    y: number;\n\n    /**\n     * Width of the rectangle.\n     */\n    width: number;\n\n    /**\n     * Height of the rectangle.\n     */\n    height: number;\n\n    /**\n     * Custom data.\n     */\n    data?: CustomDataType;\n\n    constructor(props:RectangleProps<CustomDataType>) {\n        \n        this.x = props.x;\n        this.y = props.y;\n        this.width = props.width;\n        this.height = props.height;\n        this.data = props.data;\n    }\n    \n    /**\n     * Determine which quadrant this rectangle belongs to.\n     * @param node - Quadtree node to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)\n     */\n    qtIndex(node:NodeGeometry): number[] {\n        \n        const indexes:number[] = [],\n            boundsCenterX   = node.x + (node.width/2),\n            boundsCenterY   = node.y + (node.height/2);\n\n        const startIsNorth  = this.y < boundsCenterY,\n            startIsWest     = this.x < boundsCenterX,\n            endIsEast       = this.x + this.width > boundsCenterX,\n            endIsSouth      = this.y + this.height > boundsCenterY;\n\n        //top-right quad\n        if(startIsNorth && endIsEast) {\n            indexes.push(0);\n        }\n        \n        //top-left quad\n        if(startIsWest && startIsNorth) {\n            indexes.push(1);\n        }\n\n        //bottom-left quad\n        if(startIsWest && endIsSouth) {\n            indexes.push(2);\n        }\n\n        //bottom-right quad\n        if(endIsEast && endIsSouth) {\n            indexes.push(3);\n        }\n     \n        return indexes;\n    }\n}","export default function distance(x1: number, y1: number, x2: number, y2: number): number {\n\treturn Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n}","export default function euclideanDistance(x1: number, y1: number, x2: number, y2: number): number {\n\treturn (x1 - x2) ** 2 + (y1 - y2) ** 2;\n}","import { EventEmitter } from 'eventemitter3';\nimport World from './world';\n\nexport default class Entity extends EventEmitter {\n\tworld: World;\n\n\tid: number;\n\tx = 0;\n\ty = 0;\n\twidth = 0;\n\theight = 0;\n\tangle = 0;\n\tvelocityX = 0;\n\tvelocityY = 0;\n\ttype = 'entity';\n\tkey = 'boid';\n\tshields = 1;\n\tmaxShields = 1;\n\ttimeToRegenerateShields = 1;\n\ttimeSinceShieldRegeneration = 0;\n\ttimeSinceTakenDamage = 0;\n\tdead = false;\n\n\tconstructor(world: World) {\n\t\tsuper();\n\n\t\tthis.world = world;\n\t\tthis.id = world.getId();\n\t}\n\n\tload(config: any) {\n\t\tObject.keys(config).forEach((key: string) => {\n\t\t\t// @ts-expect-error\n\t\t\tthis[key] = config[key];\n\t\t});\n\t}\n\n\tupdate(delta: number) {\n\t\tthis.set('x', this.x + this.velocityX * delta);\n\t\tthis.set('y', this.y + this.velocityY * delta);\n\t\tthis.set('timeSinceTakenDamage', this.timeSinceTakenDamage + delta);\n\n\t\tif(this.shields < this.maxShields) {\n\t\t\tthis.set('timeSinceShieldRegeneration', this.timeSinceShieldRegeneration + delta);\n\t\t\tif(this.timeSinceShieldRegeneration > this.timeToRegenerateShields) {\n\t\t\t\tthis.set('shields', this.shields + 1);\n\t\t\t\tthis.set('timeSinceShieldRegeneration', 0);\n\t\t\t}\n\t\t}\n\t}\n\n\tset(prop: string, value: any) {\n\t\t// @ts-expect-error\n\t\tthis[prop] = value;\n\t\tthis.emit(`${prop}-updated`, value);\n\t}\n\n\tdie() {\n\t\t// Only emit dead once\n\t\tif(this.dead) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dead = true;\n\t\tthis.emit('dead');\n\t}\n\tcanTakeDamage() {\n\t\treturn this.timeSinceTakenDamage >= 0.2;\n\t}\n\ttakeDamage(damage: number) {\n\t\tif(!this.canTakeDamage()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.set('shields', this.shields - damage);\n\t\tthis.set('timeSinceTakenDamage', 0);\n\t\tif(this.shields < 0) {\n\t\t\tthis.die();\n\t\t}\n\t}\n}","import computeAngle from '@/math/compute-angle';\nimport distance from '@/math/distance';\nimport euclideanDistance from '@/math/euclidean-distance';\nimport Entity from './entity';\nimport Station from './station';\nconst PhaserMath = require('phaser/src/math');\n\nexport default class Ship extends Entity {\n\tstation: Station;\n\tspeed = 100;\n\n\tconstructor(station: Station) {\n\t\tsuper(station.world);\n\t\tthis.station = station;\n\t\tthis.width = 10;\n\t\tthis.height = 5;\n\t}\n\n\tget color(): number {\n\t\treturn this.station.color;\n\t}\n\n\tupdate(delta: number) {\n\t\tthis.keepInBounds();\n\n\t\tlet nearesetEnemy = this.getNearestEnemy();\n\t\tif(nearesetEnemy) {\n\t\t\t// Bounce off enemy doing damage\n\t\t\tif(distance(nearesetEnemy.x, nearesetEnemy.y, this.x, this.y) < Math.max(this.width, nearesetEnemy.width)) {\n\t\t\t\tthis.collide(nearesetEnemy);\n\t\t\t\tthis.set('velocityX', -this.velocityX);\n\t\t\t\tthis.set('velocityY', -this.velocityY);\n\t\t\t}\n\t\t\t// Move towards enemy\n\t\t\telse {\n\t\t\t\tlet force = this.getMoveTowardsForce(nearesetEnemy);\n\t\t\t\tlet newVelocity = new PhaserMath.Vector2(this.velocityX + force.x * 4, this.velocityY + force.y * 4);\n\t\t\t\tnewVelocity.normalize();\n\n\t\t\t\tthis.set('velocityX', newVelocity.x * this.speed);\n\t\t\t\tthis.set('velocityY', newVelocity.y * this.speed);\n\n\t\t\t\tthis.set('angle', computeAngle(this.velocityX, this.velocityY));\n\t\t\t}\n\t\t}\n\n\t\t// TODO: This should not be needed, but somehow ships are staying alive even after station is destroyed\n\t\tif(this.station.dead) {\n\t\t\tthis.die();\n\t\t}\n\n\t\tsuper.update(delta);\n\t}\n\t\n\tkeepInBounds() {\n\t\tif(this.x < 0) {\n\t\t\tthis.set('velocityX', Math.abs(this.velocityX));\n\t\t} else if(this.x > this.world.bounds.width) {\n\t\t\tthis.set('velocityX', -Math.abs(this.velocityX));\n\t\t}\n\n\t\tif(this.y < 0) {\n\t\t\tthis.set('velocityY', Math.abs(this.velocityY));\n\t\t} else if(this.y > this.world.bounds.height) {\n\t\t\tthis.set('velocityY', -Math.abs(this.velocityY));\n\t\t}\n\t}\n\n\tgetNearestEnemy(): Entity | null {\n\t\tlet nearesetEnemy = this.world.getNearestEntity(this, entity => {\n\t\t\tif(entity instanceof Station) {\n\t\t\t\treturn entity !== this.station;\n\t\t\t} else if(entity instanceof Ship) {\n\t\t\t\treturn entity.station !== this.station;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\n\t\tif(nearesetEnemy) {\n\t\t\treturn nearesetEnemy;\n\t\t} else {\n\t\t\tlet stations = this.world.entities.filter(entity => entity instanceof Station && entity !== this.station);\n\t\t\tstations.sort((a, b) => {\n\t\t\t\treturn euclideanDistance(a.x, a.y, this.x, this.y) - euclideanDistance(b.x, b.y, this.x, this.y);\n\t\t\t});\n\n\t\t\treturn stations[0];\n\t\t}\n\t}\n\tgetMoveTowardsForce(entity: Entity) {\n\t\tlet force = new PhaserMath.Vector2(entity.x - this.x, entity.y - this.y);\n\t\tforce.normalize();\n\t\treturn force;\n\t}\n\n\tcollide(target: Entity) {\n\t\tif(!this.canTakeDamage() || !target.canTakeDamage()) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet enemyWorth = 1;\n\t\tif(target instanceof Station) {\n\t\t\tenemyWorth = target.ships.length;\n\t\t}\n\n\t\tthis.takeDamage(1);\n\t\ttarget.takeDamage(1);\n\n\t\tif(target.dead) {\n\t\t\tthis.station.set('money', this.station.money + enemyWorth);\n\t\t}\n\t\tif(this.dead) {\n\t\t\tif(target instanceof Station) {\n\t\t\t\ttarget.set('money', target.money + 1);\n\t\t\t} else if(target instanceof Ship) {\n\t\t\t\ttarget.station.set('money', target.station.money + 1);\n\t\t\t}\n\t\t}\n\t}\n}","import Entity from './entity';\nimport Ship from './ship';\nimport World from './world';\n\nexport default class Station extends Entity {\n\tcolor = 0xff0000;\n\tships: Array<Entity> = [];\n\tmoney = 0;\n\n\tconstructor(world: World) {\n\t\tsuper(world);\n\t\tthis.key = 'station';\n\t\tthis.width = 20;\n\t\tthis.height = 20;\n\t\tthis.shields = 2;\n\t\tthis.maxShields = 2;\n\t\tthis.timeToRegenerateShields = 5;\n\t}\n\n\tupdate(delta: number) {\n\t\tsuper.update(delta);\n\n\t\tif(this.money > 0) {\n\t\t\tlet ship = new Ship(this);\n\t\t\tship.x = this.x;\n\t\t\tship.y = this.y;\n\t\t\tship.velocityX = (Math.random() > 0.5 ? -1 : 1) * Math.random() * ship.speed;\n\t\t\tship.velocityY = (Math.random() > 0.5 ? -1 : 1) * Math.random() * ship.speed;\n\n\t\t\tthis.ships.push(ship);\n\t\t\tship.on('dead', () => {\n\t\t\t\tlet index = this.ships.indexOf(ship);\n\t\t\t\tif(index >= 0) {\n\t\t\t\t\tthis.ships.splice(index, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.world.addEntity(ship);\n\t\t\tthis.set('money', this.money - 1);\n\t\t}\n\t}\n\n\tdie() {\n\t\tsuper.die();\n\n\t\tthis.ships.forEach(ship => {\n\t\t\tship.die();\n\t\t});\n\t}\n}","import { EventEmitter } from 'eventemitter3';\nimport Entity from './entity';\nimport Station from './station';\nimport { Quadtree, Rectangle } from '@timohausmann/quadtree-ts/src/index.esm';\nimport euclideanDistance from '@/math/euclidean-distance';\n\nexport default class World extends EventEmitter {\n\tentities: Array<Entity> = [];\n\tbounds: {\n\t\twidth: number,\n\t\theight: number\n\t} = { width: 0, height: 0 };\n\tidCounter = 0;\n\t// @ts-expect-error\n\tquadtree: Quadtree;\n\n\tload(config: any) {\n\t\tconfig.entities.forEach((entityConfig: any) => {\n\t\t\tlet entity;\n\t\t\tswitch(entityConfig.type) {\n\t\t\t\tcase 'station':\n\t\t\t\t\tentity = new Station(this);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tentity = new Entity(this);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tentity.load(entityConfig);\n\t\t\tthis.addEntity(entity);\n\t\t});\n\n\t\tif(config.bounds) {\n\t\t\tthis.bounds = config.bounds;\n\t\t}\n\t}\n\taddEntity(entity: Entity) {\n\t\tthis.entities.push(entity);\n\t\tentity.on('dead', () => {\n\t\t\tthis.removeEntity(entity);\n\t\t});\n\t\tthis.emit('entity-added', entity);\n\t}\n\tremoveEntity(entity: Entity) {\n\t\tlet index = this.entities.indexOf(entity);\n\t\tif(index !== -1) {\n\t\t\tthis.entities.splice(index, 1);\n\t\t}\n\t}\n\n\tupdate(delta: number) {\n\t\tthis.quadtree = new Quadtree({\n\t\t\twidth: this.bounds.width,\n\t\t\theight: this.bounds.height\n\t\t});\n\t\tthis.entities.forEach(entity => {\n\t\t\tthis.quadtree.insert(new Rectangle({\n\t\t\t\tx: entity.x,\n\t\t\t\ty: entity.y,\n\t\t\t\twidth: entity.width,\n\t\t\t\theight: entity.height,\n\t\t\t\tdata: {\n\t\t\t\t\tentity\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\tthis.entities.forEach(entity => {\n\t\t\tif(entity.dead) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tentity.update(delta);\n\t\t});\n\t}\n\n\tgetNearestEntity(entity: Entity, filter: (entity: Entity) => boolean) {\n\t\tlet rect = {\n\t\t\tx: entity.x - 50,\n\t\t\ty: entity.y - 50,\n\t\t\twidth: entity.width + 100,\n\t\t\theight: entity.height + 100\n\t\t};\n\n\t\t// TODO: At the beginning this is slow because we are in a clump of our own units so it returns a lot of results without any enemies\n\t\tlet entities = this.getEntitiesInRange(rect).filter(otherEntity => otherEntity !== entity && !otherEntity.dead && filter(otherEntity));\n\t\tif(entities.length === 0) {\n\t\t\trect.x -= 100;\n\t\t\trect.y -= 100;\n\t\t\trect.width += 200;\n\t\t\trect.height += 200;\n\t\t\tentities = this.getEntitiesInRange(rect).filter(otherEntity => otherEntity !== entity && filter(otherEntity));\n\t\t}\n\n\t\tentities.sort((a, b) => {\n\t\t\treturn euclideanDistance(a.x, a.y, entity.x, entity.y) - euclideanDistance(b.x, b.y, entity.x, entity.y);\n\t\t});\n\t\treturn entities[0] ?? null;\n\t}\n\tgetEntitiesInRange(range: { x: number, y: number, width: number, height: number }): Array<Entity> {\n\t\treturn this.quadtree.retrieve(new Rectangle(range)).map((result: any) => result.data.entity);\n\t}\n\n\tgetId() {\n\t\tthis.idCounter++;\n\t\treturn this.idCounter;\n\t}\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-12587e64\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"home\" }\nconst _hoisted_2 = { class: \"list\" }\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { id: \"phaser-container-simple\" }, null, -1))\n\nimport { ref, onMounted, onBeforeUnmount, Ref } from 'vue';\nimport Phaser from 'phaser';\nimport World from './entities/world';\nimport Entity from './entities/entity';\nimport generateScene from '@/data/generate-scene';\nimport Station from './entities/station';\nimport Ship from './entities/ship';\n\n\nexport default /*#__PURE__*/_defineComponent({\n  setup(__props) {\n\nlet world = new World();\nconst startupTime = ref(0);\nconst minUpdateTime = ref(0);\nconst maxUpdateTime = ref(0);\nconst avgUpdateTime = ref(0);\nconst stationsCount = ref(0);\nconst shipsCount = ref(0);\nconst stationShips = ref([]) as Ref<Array<{ color: number, displayColor: string, ships: number }>>;\n\nlet game: Phaser.Game | null;\nonMounted(() => {\n\tlet updateTicks = 0;\n\tlet updateTimes: Array<number> = [];\n\n\tconst width = window.innerWidth / 3 * 2;\n\tconst height = window.innerHeight / 3 * 2;\n\tlet paused = false;\n\tgame = new Phaser.Game({\n\t\ttype: Phaser.AUTO,\n\t\twidth,\n\t\theight,\n\t\tparent: 'phaser-container-simple',\n\t\t// @ts-expect-error\n\t\tscene: {\n\t\t\tpreload() {\n\t\t\t\tthis.load.image('boid', 'boid.png');\n\t\t\t\tthis.load.image('station', 'station.png');\n\t\t\t\tthis.load.image('shield', 'shield3.png');\n\t\t\t},\n\t\t\tcreate() {\n\t\t\t\tworld.on('entity-added', (entity: Entity) => {\n\t\t\t\t\tlet image = this.add.image(entity.x, entity.y, entity.key) as any;\n\t\t\t\t\timage.setScale(entity.width / image.width, entity.height / image.height);\n\t\t\t\t\timage.shieldImage = this.add.image(entity.x, entity.y, 'shield');\n\t\t\t\t\timage.shieldImage.setScale(entity.width / image.shieldImage.width * 2, entity.height / image.shieldImage.height * 2);\n\t\t\t\t\timage.shieldImage.visible = entity.shields > 0;\n\t\t\t\t\tif(entity instanceof Station || entity instanceof Ship) {\n\t\t\t\t\t\timage.setTint(entity.color);\n\t\t\t\t\t}\n\n\t\t\t\t\t['x', 'y', 'angle'].forEach(prop => {\n\t\t\t\t\t\tentity.on(`${prop}-updated`, (newValue: any) => {\n\t\t\t\t\t\t\timage[prop] = newValue;\n\t\t\t\t\t\t\timage.shieldImage[prop] = newValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tentity.on('dead', () => {\n\t\t\t\t\t\timage.destroy();\n\t\t\t\t\t\timage.shieldImage.destroy();\n\t\t\t\t\t});\n\t\t\t\t\tentity.on('shields-updated', (newValue: number) => {\n\t\t\t\t\t\timage.shieldImage.visible = newValue > 0;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tlet start = performance.now();\n\t\t\t\tworld.load(generateScene({\n\t\t\t\t\tstations: 6,\n\t\t\t\t\tshipsPerStation: 100,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}));\n\t\t\t\tlet end = performance.now();\n\t\t\t\tstartupTime.value = end - start;\n\n\t\t\t\tlet stations = world.entities.filter(entity => entity instanceof Station) as Array<Station>;\n\t\t\t\tstationShips.value = stations.map(station => {\n\t\t\t\t\tlet displayColor = '#' + station.color.toString(16);\n\t\t\t\t\tif(displayColor === '#ffffff') {\n\t\t\t\t\t\tdisplayColor = '#00000';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcolor: station.color,\n\t\t\t\t\t\tdisplayColor,\n\t\t\t\t\t\tships: station.ships.length\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tthis.input.keyboard.on('keydown-SPACE', () => {\n\t\t\t\t\tpaused = !paused;\n\t\t\t\t});\n\t\t\t},\n\t\t\tupdate(time: number, delta: number) {\n\t\t\t\tif(paused) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet start = performance.now();\n\t\t\t\tworld.update(delta / 1_000);\n\t\t\t\tlet end = performance.now();\n\n\t\t\t\tupdateTimes.push(end - start);\n\t\t\t\tupdateTicks += delta;\n\t\t\t\tif(updateTicks > 1_000) {\n\t\t\t\t\tminUpdateTime.value = updateTimes.reduce((min, time) => {\n\t\t\t\t\t\treturn Math.min(min, time);\n\t\t\t\t\t}, 1_000_000);\n\t\t\t\t\tmaxUpdateTime.value = updateTimes.reduce((max, time) => {\n\t\t\t\t\t\treturn Math.max(max, time);\n\t\t\t\t\t}, 0);\n\t\t\t\t\tavgUpdateTime.value = updateTimes.reduce((total, time) => {\n\t\t\t\t\t\treturn total + time;\n\t\t\t\t\t}, 0) / updateTimes.length;\n\t\t\t\t\tupdateTimes = [];\n\t\t\t\t\tupdateTicks = 0;\n\n\t\t\t\t\tstationsCount.value = world.entities.filter(entity => entity instanceof Station).length;\n\t\t\t\t\tshipsCount.value = world.entities.filter(entity => entity instanceof Ship).length;\n\n\t\t\t\t\tlet stations = world.entities.filter(entity => entity instanceof Station) as Array<Station>;\n\t\t\t\t\tstationShips.value.forEach(val => {\n\t\t\t\t\t\tlet matchingStation = stations.find(station => station.color === val.color);\n\t\t\t\t\t\tif(matchingStation) {\n\t\t\t\t\t\t\tval.ships = matchingStation.ships.length;\n\t\t\t\t\t\t} else if(val.ships > 0) {\n\t\t\t\t\t\t\t// paused = true;\n\t\t\t\t\t\t\tval.ships = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\nonBeforeUnmount(() => {\n\tif(game) {\n\t\tgame.destroy();\n\t\tgame = null;\n\t} \n});\n\nfunction addShips() {\n\tlet stations = world.entities.filter(entity => entity instanceof Station) as Array<Station>;\n\tstations.forEach(station => {\n\t\tstation.set('money', station.money + 10);\n\t});\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", null, \"Startup time: \" + _toDisplayString(startupTime.value.toFixed(2)) + \" ms\", 1),\n      _createElementVNode(\"div\", null, \"Update time: \" + _toDisplayString(minUpdateTime.value.toFixed(2)) + \" - \" + _toDisplayString(maxUpdateTime.value.toFixed(2)) + \" (\" + _toDisplayString(avgUpdateTime.value.toFixed(2)) + \" avg) ms\", 1),\n      _hoisted_3,\n      _createElementVNode(\"div\", null, \"Entities: \" + _toDisplayString(stationsCount.value) + \" stations and \" + _toDisplayString(shipsCount.value) + \" ships\", 1),\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(stationShips), (station) => {\n        return (_openBlock(), _createElementBlock(\"div\", {\n          key: station.color,\n          style: _normalizeStyle({ color: station.displayColor })\n        }, _toDisplayString('#' + station.color.toString(16)) + \": \" + _toDisplayString(station.ships), 5))\n      }), 128)),\n      _hoisted_4,\n      _createElementVNode(\"button\", { onClick: addShips }, \"Add Ships\")\n    ]),\n    _hoisted_5\n  ]))\n}\n}\n\n})","import script from \"./SimpleGame.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./SimpleGame.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./SimpleGame.vue?vue&type=style&index=0&id=12587e64&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/ecs-arraybuffer/ecs-arraybuffer/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-12587e64\"]])\n\nexport default __exports__"],"names":["Quadtree","constructor","props","level","this","bounds","x","y","width","height","maxObjects","maxLevels","objects","nodes","getIndex","obj","qtIndex","split","coords","i","insert","length","indexes","push","k","retrieve","returnObjects","concat","filter","item","index","indexOf","clear","Rectangle","data","node","boundsCenterX","boundsCenterY","startIsNorth","startIsWest","endIsEast","endIsSouth","distance","x1","y1","x2","y2","Math","sqrt","euclideanDistance","Entity","EventEmitter","world","super","id","getId","load","config","Object","keys","forEach","key","update","delta","set","velocityX","velocityY","timeSinceTakenDamage","shields","maxShields","timeSinceShieldRegeneration","timeToRegenerateShields","prop","value","emit","die","dead","canTakeDamage","takeDamage","damage","PhaserMath","require","Ship","station","color","keepInBounds","nearesetEnemy","getNearestEnemy","max","collide","force","getMoveTowardsForce","newVelocity","Vector2","normalize","speed","computeAngle","abs","getNearestEntity","entity","Station","stations","entities","sort","a","b","target","enemyWorth","ships","money","ship","random","on","splice","addEntity","World","entityConfig","type","removeEntity","quadtree","rect","getEntitiesInRange","otherEntity","range","map","result","idCounter","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","_hoisted_2","_hoisted_3","_createElementVNode","_hoisted_4","_hoisted_5","_defineComponent","setup","__props","startupTime","ref","minUpdateTime","maxUpdateTime","avgUpdateTime","stationsCount","shipsCount","stationShips","game","addShips","onMounted","updateTicks","updateTimes","window","innerWidth","innerHeight","paused","Phaser","parent","scene","preload","image","create","add","setScale","shieldImage","visible","setTint","newValue","destroy","start","performance","now","generateScene","shipsPerStation","end","displayColor","toString","input","keyboard","time","reduce","min","total","val","matchingStation","find","onBeforeUnmount","_ctx","_cache","_openBlock","_createElementBlock","_toDisplayString","toFixed","_Fragment","_renderList","_unref","style","_normalizeStyle","onClick","__exports__"],"sourceRoot":""}