{"version":3,"file":"js/47.65e697c6.js","mappings":"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","sources":["webpack://ecs-sharedarraybuffer-playground/./src/math/distance.ts","webpack://ecs-sharedarraybuffer-playground/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://ecs-sharedarraybuffer-playground/./node_modules/@timohausmann/quadtree-ts/src/Quadtree.ts","webpack://ecs-sharedarraybuffer-playground/./node_modules/@timohausmann/quadtree-ts/src/Rectangle.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/components/has-component.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/entities/kill-entity.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/systems/collision-system.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/systems/collision-worker.ts","webpack://ecs-sharedarraybuffer-playground/webpack/bootstrap","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/chunk loaded","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/define property getters","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/ensure chunk","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/get javascript chunk filename","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/get mini-css chunk filename","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/global","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/hasOwnProperty shorthand","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/publicPath","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/importScripts chunk loading","webpack://ecs-sharedarraybuffer-playground/webpack/runtime/startup chunk dependencies","webpack://ecs-sharedarraybuffer-playground/webpack/startup"],"sourcesContent":["export default function distance(x1: number, y1: number, x2: number, y2: number): number {\n\treturn Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import type { NodeGeometry, Indexable } from './types';\nimport type { Rectangle } from './Rectangle';\nimport type { Circle } from './Circle';\nimport type { Line } from './Line';\n\n/**\n * Quadtree Constructor Properties\n */\nexport interface QuadtreeProps {\n\n    /**\n     * Width of the node.\n     */\n    width: number\n\n    /**\n     * Height of the node.\n     */\n    height: number\n\n    /**\n     * X Offset of the node.\n     * @defaultValue `0`\n     */\n    x?: number\n\n    /**\n     * Y Offset of the node.\n     * @defaultValue `0`\n     */\n    y?: number\n\n    /**\n     * Max objects this node can hold before it splits.\n     * @defaultValue `10`\n     */\n    maxObjects?: number\n\n    /**\n     * Total max nesting levels of the root Quadtree node.\n     * @defaultValue `4`\n     */\n    maxLevels?: number\n}\n\n/**\n * Class representing a Quadtree node.\n * \n * @example\n * ```typescript\n * const tree = new Quadtree({\n *   width: 100,\n *   height: 100,\n *   x: 0,           // optional, default:  0\n *   y: 0,           // optional, default:  0\n *   maxObjects: 10, // optional, default: 10\n *   maxLevels: 4,   // optional, default:  4\n * });\n * ```\n * \n * @example Typescript: If you like to be explicit, you optionally can pass in a generic type for objects to be stored in the Quadtree:\n * ```typescript\n * class GameEntity extends Rectangle {\n *   ...\n * }\n * const tree = new Quadtree<GameEntity>({\n *   width: 100,\n *   height: 100,\n * });\n * ```\n */\nexport class Quadtree<ObjectsType extends Rectangle|Circle|Line|Indexable> {\n\n    /**\n     * The numeric boundaries of this node.\n     * @readonly\n     */\n    bounds: NodeGeometry;\n\n    /**\n     * Max objects this node can hold before it splits.\n     * @defaultValue `10`\n     * @readonly\n     */\n    maxObjects: number;\n    \n    /**\n     * Total max nesting levels of the root Quadtree node.\n     * @defaultValue `4`\n     * @readonly\n     */\n    maxLevels: number;\n\n    /**\n     * The level of this node.\n     * @defaultValue `0`\n     * @readonly\n     */\n    level: number;\n\n    /**\n     * Array of objects in this node.\n     * @defaultValue `[]`\n     * @readonly\n     */\n    objects: ObjectsType[];\n\n    /**\n     * Subnodes of this node\n     * @defaultValue `[]`\n     * @readonly\n     */\n    nodes: Quadtree<ObjectsType>[];\n\n    /**\n     * Quadtree Constructor\n     * @param props - bounds and properties of the node\n     * @param level - depth level (internal use only, required for subnodes)\n     */\n    constructor(props:QuadtreeProps, level=0) {\n        \n        this.bounds = { \n            x: props.x || 0, \n            y: props.y || 0, \n            width: props.width, \n            height: props.height,\n        };\n        this.maxObjects = (typeof props.maxObjects === 'number') ? props.maxObjects : 10;\n        this.maxLevels  = (typeof props.maxLevels === 'number') ? props.maxLevels : 4;\n        this.level      = level;\n        \n        this.objects = [];\n        this.nodes   = [];\n    }\n    \n    /**\n     * Get the quadrant (subnode indexes) an object belongs to.\n     * \n     * @example Mostly for internal use but you can call it like so:\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * const rectangle = new Rectangle({ x: 25, y: 25, width: 10, height: 10 });\n     * const indexes = tree.getIndex(rectangle);\n     * console.log(indexes); // [1]\n     * ```\n     * \n     * @param obj - object to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right).\n     */\n    getIndex(obj:ObjectsType): number[] {\n        return obj.qtIndex(this.bounds);\n    }\n\n    /**\n     * Split the node into 4 subnodes.\n     * @internal\n     * \n     * @example Mostly for internal use! You should only call this yourself if you know what you are doing:\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.split();\n     * console.log(tree); // now tree has four subnodes\n     * ```\n     */\n    split(): void {\n        \n        const level = this.level + 1,\n            width   = this.bounds.width/2,\n            height  = this.bounds.height/2,\n            x       = this.bounds.x,\n            y       = this.bounds.y;\n\n        const coords = [\n            { x: x + width, y: y },\n            { x: x,         y: y },\n            { x: x,         y: y + height },\n            { x: x + width, y: y + height },\n        ];\n\n        for(let i=0; i < 4; i++) {\n            this.nodes[i] = new Quadtree({\n                x: coords[i].x, \n                y: coords[i].y, \n                width,\n                height,\n                maxObjects: this.maxObjects,\n                maxLevels: this.maxLevels,\n            }, level);\n        }        \n    }\n\n\n    /**\n     * Insert an object into the node. If the node\n     * exceeds the capacity, it will split and add all\n     * objects to their corresponding subnodes.\n     * \n     * @example you can use any shape here (or object with a qtIndex method, see README):\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.insert(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));\n     * tree.insert(new Circle({ x: 25, y: 25, r: 10, data: 512 }));\n     * tree.insert(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));\n     * ```\n     * \n     * @param obj - Object to be added.\n     */\n    insert(obj:ObjectsType): void {\n        \n        //if we have subnodes, call insert on matching subnodes\n        if(this.nodes.length) {\n            const indexes = this.getIndex(obj);\n    \n            for(let i=0; i<indexes.length; i++) {\n                this.nodes[indexes[i]].insert(obj);\n            }\n            return;\n        }\n    \n        //otherwise, store object here\n        this.objects.push(obj);\n\n        //maxObjects reached\n        if(this.objects.length > this.maxObjects && this.level < this.maxLevels) {\n\n            //split if we don't already have subnodes\n            if(!this.nodes.length) {\n                this.split();\n            }\n            \n            //add all objects to their corresponding subnode\n            for(let i=0; i<this.objects.length; i++) {\n                const indexes = this.getIndex(this.objects[i]);\n                for(let k=0; k<indexes.length; k++) {\n                    this.nodes[indexes[k]].insert(this.objects[i]);\n                }\n            }\n\n            //clean up this node\n            this.objects = [];\n        }\n    }\n    \n    \n    /**\n     * Return all objects that could collide with the given geometry.\n     * \n     * @example Just like insert, you can use any shape here (or object with a qtIndex method, see README):\n     * ```typescript \n     * tree.retrieve(new Rectangle({ x: 25, y: 25, width: 10, height: 10, data: 'data' }));\n     * tree.retrieve(new Circle({ x: 25, y: 25, r: 10, data: 512 }));\n     * tree.retrieve(new Line({ x1: 25, y1: 25, x2: 60, y2: 40, data: { custom: 'property'} }));\n     * ```\n     * \n     * @param obj - geometry to be checked\n     * @returns Array containing all detected objects.\n     */\n    retrieve(obj:ObjectsType): ObjectsType[] {\n        \n        const indexes = this.getIndex(obj);\n        let returnObjects = this.objects;\n            \n        //if we have subnodes, retrieve their objects\n        if(this.nodes.length) {\n            for(let i=0; i<indexes.length; i++) {\n                returnObjects = returnObjects.concat(this.nodes[indexes[i]].retrieve(obj));\n            }\n        }\n\n        //remove duplicates\n        returnObjects = returnObjects.filter(function(item, index) {\n            return returnObjects.indexOf(item) >= index;\n        });\n    \n        return returnObjects;\n    }\n\n\n    /**\n     * Clear the Quadtree.\n     * \n     * @example\n     * ```typescript\n     * const tree = new Quadtree({ width: 100, height: 100 });\n     * tree.insert(new Circle({ x: 25, y: 25, r: 10 }));\n     * tree.clear();\n     * console.log(tree); // tree.objects and tree.nodes are empty\n     * ```\n     */\n    clear(): void {\n        \n        this.objects = [];\n    \n        for(let i=0; i < this.nodes.length; i++) {\n            if(this.nodes.length) {\n                this.nodes[i].clear();\n            }\n        }\n\n        this.nodes = [];\n    }\n}","import type { NodeGeometry, Indexable } from './types';\n\n/**\n * Rectangle Geometry\n * @beta\n * \n * @remarks\n * This interface simply represents a rectangle geometry.\n */\nexport interface RectangleGeometry {\n\n    /**\n     * X start of the rectangle (top left).\n     */\n    x: number\n\n    /**\n     * Y start of the rectangle (top left).\n     */\n    y: number\n\n    /**\n     * Width of the rectangle.\n     */\n    width: number\n\n    /**\n     * Height of the rectangle.\n     */\n    height: number\n}\n\n/**\n * Rectangle Constructor Properties\n * @beta\n * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n */\nexport interface RectangleProps<CustomDataType = void> extends RectangleGeometry {\n\n    /**\n     * Custom data\n     */\n    data?: CustomDataType\n}\n\n/**\n * Class representing a Rectangle\n * @typeParam CustomDataType - Type of the custom data property (optional, inferred automatically).\n * \n * @example Without custom data (JS/TS):\n * ```typescript\n * const rectangle = new Rectangle({ \n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n * });\n * ```\n * \n * @example With custom data (JS/TS):\n * ```javascript\n * const rectangle = new Rectangle({ \n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n *   data: { \n *     name: 'Jane', \n *     health: 100,\n *   },\n * });\n * ```\n * \n * @example With custom data (TS):\n * ```typescript\n * interface ObjectData {\n *   name: string\n *   health: number\n * }\n * const entity: ObjectData = {\n *   name: 'Jane',\n *   health: 100,\n * };\n * \n * // Typescript will infer the type of the data property\n * const rectangle1 = new Rectangle({\n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n *   data: entity,\n * });\n * \n * // You can also pass in a generic type for the data property\n * const rectangle2 = new Rectangle<ObjectData>({ \n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n * });\n * rectangle2.data = entity;\n * ```\n * \n * @example With custom class extending Rectangle (implements {@link RectangleGeometry} (x, y, width, height)):\n * ```javascript\n * // extending inherits the qtIndex method\n * class Box extends Rectangle {\n *   \n *   constructor(props) {\n *     // call super to set x, y, width, height (and data, if given)\n *     super(props);\n *     this.content = props.content;\n *   }\n * }\n * \n * const box = new Box({\n *   content: 'Gravity Boots',\n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 40,\n * });\n * ```\n * \n * @example With custom class and mapping {@link RectangleGeometry}:\n * ```javascript\n * // no need to extend if you don't implement RectangleGeometry\n * class Box {\n *   \n *   constructor(content) {\n *     this.content = content;\n *     this.position = [10, 20];\n *     this.size = [30, 40];\n *   }\n *   \n *   // add a qtIndex method to your class\n *   qtIndex(node) {\n *     // map your properties to RectangleGeometry\n *     return Rectangle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       width: this.size[0],\n *       height: this.size[1],\n *     }, node);\n *   }\n * }\n * \n * const box = new Box('Gravity Boots');\n * ```\n * \n * @example With custom object that implements {@link RectangleGeometry}:\n * ```javascript\n * const player = {\n *   name: 'Jane', \n *   health: 100,\n *   x: 10, \n *   y: 20, \n *   width: 30,\n *   height: 30,\n *   qtIndex: Rectangle.prototype.qtIndex,\n * });\n * ```\n * \n * @example With custom object and mapping {@link RectangleGeometry}:\n * ```javascript\n * // Note: this is not recommended but possible. \n * // Using this technique, each object would have it's own qtIndex method. \n * // Rather add qtIndex to your prototype, e.g. by using classes like shown above.\n * const player = {\n *   name: 'Jane', \n *   health: 100,\n *   position: [10, 20], \n *   size: [30, 40], \n *   qtIndex: function(node) {\n *     return Rectangle.prototype.qtIndex.call({\n *       x: this.position[0],\n *       y: this.position[1],\n *       width: this.size[0],\n *       height: this.size[1],\n *     }, node);\n *   },\n * });\n * ```\n */\nexport class Rectangle<CustomDataType = void> implements RectangleGeometry, Indexable {\n\n    /**\n     * X start of the rectangle (top left).\n     */\n    x: number;\n\n    /**\n     * Y start of the rectangle (top left).\n     */\n    y: number;\n\n    /**\n     * Width of the rectangle.\n     */\n    width: number;\n\n    /**\n     * Height of the rectangle.\n     */\n    height: number;\n\n    /**\n     * Custom data.\n     */\n    data?: CustomDataType;\n\n    constructor(props:RectangleProps<CustomDataType>) {\n        \n        this.x = props.x;\n        this.y = props.y;\n        this.width = props.width;\n        this.height = props.height;\n        this.data = props.data;\n    }\n    \n    /**\n     * Determine which quadrant this rectangle belongs to.\n     * @param node - Quadtree node to be checked\n     * @returns Array containing indexes of intersecting subnodes (0-3 = top-right, top-left, bottom-left, bottom-right)\n     */\n    qtIndex(node:NodeGeometry): number[] {\n        \n        const indexes:number[] = [],\n            boundsCenterX   = node.x + (node.width/2),\n            boundsCenterY   = node.y + (node.height/2);\n\n        const startIsNorth  = this.y < boundsCenterY,\n            startIsWest     = this.x < boundsCenterX,\n            endIsEast       = this.x + this.width > boundsCenterX,\n            endIsSouth      = this.y + this.height > boundsCenterY;\n\n        //top-right quad\n        if(startIsNorth && endIsEast) {\n            indexes.push(0);\n        }\n        \n        //top-left quad\n        if(startIsWest && startIsNorth) {\n            indexes.push(1);\n        }\n\n        //bottom-left quad\n        if(startIsWest && endIsSouth) {\n            indexes.push(2);\n        }\n\n        //bottom-right quad\n        if(endIsEast && endIsSouth) {\n            indexes.push(3);\n        }\n     \n        return indexes;\n    }\n}","import Components from './components';\nimport getTypeBit from './get-type-bit';\n\nexport default function hasComponent(components: Components, eid: number, type: string) {\n\treturn (Atomics.load(components.entity.components, eid) & getTypeBit(type)) > 0;\n}","import WorldConfig from './world-config';\n\nexport function killEntity(world: WorldConfig, eid: number) {\n\tAtomics.store(world.components.entity.dead, eid, 1);\n\n\t// NOTE: There will be a gap time where another thread can try to grab this recycled id before it is actually set\n\tlet oldIndex = Atomics.add(world.recycledIndexes, 0, 1);\n\tAtomics.store(world.recycledIds, oldIndex + 1, eid);\n}","import computeAngle from '@/math/compute-angle';\nimport distance from '@/math/distance';\nimport { Quadtree, Rectangle } from '@timohausmann/quadtree-ts/src/index.esm';\nimport { getEntitiesWithComponents } from '../entities/get-entities';\nimport hasComponent from '../components/has-component';\nimport WorldConfig from '../entities/world-config';\nimport { killEntity } from '../entities/kill-entity';\n\nexport default function collisionSystem(world: WorldConfig) {\n\tconst position = world.components.position;\n\tconst velocity = world.components.velocity;\n\tconst controlled = world.components.controlled;\n\tconst controller = world.components.controller;\n\n\treturn () => {\n\t\t// Create and populate quadtree\n\t\tlet quadtree = new Quadtree({\n\t\t\twidth: world.bounds.width * 1_000,\n\t\t\theight: world.bounds.height * 1_000\n\t\t});\n\t\tgetEntitiesWithComponents(world, ['position', 'health']).forEach(eid => {\n\t\t\tquadtree.insert(new Rectangle({\n\t\t\t\tx: Atomics.load(position.x, eid),\n\t\t\t\ty: Atomics.load(position.y, eid),\n\t\t\t\twidth: Atomics.load(position.width, eid),\n\t\t\t\theight: Atomics.load(position.height, eid),\n\t\t\t\tdata: {\n\t\t\t\t\teid\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\t// Use quadtree to see who we are colliding with\n\t\tlet ships = getEntitiesWithComponents(world, ['velocity']);\n\t\tships.forEach(eid => {\n\t\t\tlet entitiesInRange = quadtree.retrieve(new Rectangle({\n\t\t\t\tx: position.x[eid],\n\t\t\t\ty: position.y[eid],\n\t\t\t\twidth: position.width[eid],\n\t\t\t\theight: position.height[eid]\n\t\t\t})).map((result: any) => result.data.eid).filter((otherEid: number) => otherEid !== eid);\n\t\t\tlet shipColor = controller.color[controlled.owner[eid]];\n\t\t\tlet enemiesInRange = entitiesInRange.filter((otherEid: number) => {\n\t\t\t\t// Ship\n\t\t\t\tif(hasComponent(world.components, otherEid, 'controlled')) {\n\t\t\t\t\tlet stationEid = controlled.owner[otherEid];\n\t\t\t\t\treturn controller.color[stationEid] !== shipColor;\n\t\t\t\t}\n\t\t\t\t// Station\n\t\t\t\telse if(hasComponent(world.components, otherEid, 'controller')) {\n\t\t\t\t\treturn controller.color[otherEid] !== shipColor;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet collisions = enemiesInRange.filter((otherEid: number) => distance(position.x[otherEid], position.y[otherEid], position.x[eid], position.y[eid]) < Math.max(position.width[eid], position.width[otherEid]));\n\t\t\tif(collisions.length) {\n\t\t\t\tcollide(ships, eid, collisions[0]);\n\n\t\t\t\tvelocity.x[eid] = -velocity.x[eid];\n\t\t\t\tvelocity.y[eid] = -velocity.y[eid];\n\t\t\t\tposition.angle[eid] = computeAngle(velocity.x[eid], velocity.y[eid]);\n\t\t\t}\n\t\t});\n\t};\n\n\tfunction collide(ships: Array<number>, eid: number, target: number) {\n\t\tif(!canTakeDamage(eid) || !canTakeDamage(target)) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tlet enemyWorth = 1;\n\t\tif(hasComponent(world.components, target, 'controller')) {\n\t\t\tenemyWorth = ships.filter(eid => world.components.controlled.owner[eid] === target).length;\n\t\t}\n\t\n\t\ttakeDamage(ships, eid, 1);\n\t\ttakeDamage(ships, target, 1);\n\t\n\t\tconst controlled = world.components.controlled;\n\t\tif(world.components.entity.dead[target]) {\n\t\t\tlet stationEid = controlled.owner[eid];\n\t\t\tworld.components.controller.money[stationEid] += enemyWorth;\n\t\t}\n\t\tif(world.components.entity.dead[eid]) {\n\t\t\t// Ship\n\t\t\tif(hasComponent(world.components, target, 'controlled')) {\n\t\t\t\tlet stationEid = controlled.owner[target];\n\t\t\t\tworld.components.controller.money[stationEid] += 1;\n\t\t\t}\n\t\t\t// Station\n\t\t\telse if(hasComponent(world.components, target, 'controller')) {\n\t\t\t\tworld.components.controller.money[target] += 1;\n\t\t\t}\n\t\t}\n\t}\n\tfunction takeDamage(ships: Array<number>, eid: number, damage: number) {\n\t\tconst health = world.components.health;\n\t\thealth.shields[eid] -= damage;\n\t\thealth.timeSinceTakenDamage[eid] = 0;\n\t\tif(health.shields[eid] < 0) {\n\t\t\tkillEntity(world, eid);\n\t\n\t\t\tif(hasComponent(world.components, eid, 'controller')) {\n\t\t\t\tlet controlledShips = ships.filter(shipEid => world.components.controlled.owner[shipEid] === eid);\n\t\t\t\tcontrolledShips.forEach(shipEid => {\n\t\t\t\t\tkillEntity(world, shipEid);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction canTakeDamage(eid: number) {\n\t\treturn Atomics.load(world.components.health.timeSinceTakenDamage, eid) >= 200 * 1_000;\n\t}\n}","import createWorkerSystem from './create-worker-system';\nimport collisionSystem from './collision-system';\n\ncreateWorkerSystem(collisionSystem);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [134,350], function() { return __webpack_require__(5047); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"134\":\"d3ae113b\",\"350\":\"d4051e9a\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/ecs-sharedarraybuffer-playground/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t47: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkecs_sharedarraybuffer_playground\"] = self[\"webpackChunkecs_sharedarraybuffer_playground\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([\n\t\t__webpack_require__.e(134),\n\t\t__webpack_require__.e(350)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["distance","x1","y1","x2","y2","Math","sqrt","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Quadtree","constructor","props","level","this","bounds","x","y","width","height","maxObjects","maxLevels","objects","nodes","getIndex","qtIndex","split","coords","i","insert","length","indexes","push","k","retrieve","returnObjects","concat","filter","item","index","indexOf","clear","Rectangle","data","node","boundsCenterX","boundsCenterY","startIsNorth","startIsWest","endIsEast","endIsSouth","hasComponent","components","eid","type","Atomics","load","entity","getTypeBit","killEntity","world","store","dead","oldIndex","add","recycledIndexes","recycledIds","collisionSystem","position","velocity","controlled","controller","quadtree","getEntitiesWithComponents","forEach","ships","entitiesInRange","map","result","otherEid","shipColor","color","owner","enemiesInRange","stationEid","collisions","max","collide","angle","computeAngle","target","canTakeDamage","enemyWorth","takeDamage","money","damage","health","shields","timeSinceTakenDamage","controlledShips","shipEid","createWorkerSystem","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","d","definition","o","get","f","e","chunkId","Promise","all","reduce","promises","u","miniCssF","g","globalThis","Function","window","prop","prototype","hasOwnProperty","call","p","installedChunks","installChunk","moreModules","runtime","pop","parentChunkLoadingFunction","importScripts","chunkLoadingGlobal","self","bind","next","then"],"sourceRoot":""}