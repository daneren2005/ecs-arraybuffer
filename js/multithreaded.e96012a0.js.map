{"version":3,"file":"js/multithreaded.e96012a0.js","mappings":"8QAAO,MAAMA,EAAuB,ICItB,MAAOC,UAAeC,EAAAA,aAK/BC,QAAS,OAAOC,KAAKC,MAAMC,WAAWC,SAASJ,EAAEC,KAAKI,KACtDL,MAAEM,GAAOL,KAAKC,MAAMC,WAAWC,SAASJ,EAAEC,KAAKI,KAAOC,EACtDC,QAAS,OAAON,KAAKC,MAAMC,WAAWC,SAASG,EAAEN,KAAKI,KACtDE,MAAED,GAAOL,KAAKC,MAAMC,WAAWC,SAASG,EAAEN,KAAKI,KAAOC,EACtDE,YAAa,OAAOP,KAAKC,MAAMC,WAAWC,SAASI,MAAMP,KAAKI,KAC9DG,UAAMF,GAAOL,KAAKC,MAAMC,WAAWC,SAASI,MAAMP,KAAKI,KAAOC,EAC9DG,aAAc,OAAOR,KAAKC,MAAMC,WAAWC,SAASK,OAAOR,KAAKI,KAChEI,WAAOH,GAAOL,KAAKC,MAAMC,WAAWC,SAASK,OAAOR,KAAKI,KAAOC,EAGhEI,cAAe,OAAOT,KAAKC,MAAMC,WAAWQ,OAAOD,QAAQT,KAAKI,KAChEK,YAAQJ,GAAOL,KAAKC,MAAMC,WAAWQ,OAAOD,QAAQT,KAAKI,KAAOC,EAChEM,iBAAkB,OAAOX,KAAKC,MAAMC,WAAWQ,OAAOC,WAAWX,KAAKI,KACtEO,eAAWN,GAAOL,KAAKC,MAAMC,WAAWQ,OAAOC,WAAWX,KAAKI,KAAOC,EACtEO,8BAA+B,OAAOZ,KAAKC,MAAMC,WAAWQ,OAAOE,wBAAwBZ,KAAKI,KAChGQ,4BAAwBP,GAAOL,KAAKC,MAAMC,WAAWQ,OAAOE,wBAAwBZ,KAAKI,KAAOC,EAChGQ,kCAAmC,OAAOb,KAAKC,MAAMC,WAAWQ,OAAOG,4BAA4Bb,KAAKI,KACxGS,gCAA4BR,GAAOL,KAAKC,MAAMC,WAAWQ,OAAOG,4BAA4Bb,KAAKI,KAAOC,EACxGS,2BAA4B,OAAOd,KAAKC,MAAMC,WAAWQ,OAAOI,qBAAqBd,KAAKI,KAC1FU,yBAAqBT,GAAOL,KAAKC,MAAMC,WAAWQ,OAAOI,qBAAqBd,KAAKI,KAAOC,EAC1FU,WAAY,OAAOf,KAAKC,MAAMC,WAAWQ,OAAOD,QAAQT,KAAKI,KAC7DW,SAAKV,GAAOL,KAAKC,MAAMC,WAAWQ,OAAOD,QAAQT,KAAKI,KAAOC,EAKjEW,YAAYf,GACXgB,SADuB,2EAHjB,WAGiB,kBAFlB,QAILjB,KAAKI,IAAMH,EAAMiB,QACjBlB,KAAKC,MAAQA,EAEbD,KAAKS,QAAU,EACfT,KAAKW,WAAa,EAClBX,KAAKY,wBAA0B,EAC/BZ,KAAKa,4BAA8B,EACnCb,KAAKc,qBAAuB,EAC5Bd,KAAKe,KAAO,EAGbI,KAAKC,GAEJC,OAAOC,KAAKF,GAAQG,SAASC,IAE3BxB,KAAKwB,GADK,MAARA,GAAuB,MAARA,EACLJ,EAAOI,GAAO5B,EAGdwB,EAAOI,OClDjB,SAAUC,EAA0BxB,EAAoByB,GAC7D,IAAIC,EAAWC,EAAYF,GAEvBG,EAAO,GACPC,EAAiBC,QAAQZ,KAAKlB,EAAM+B,UAAW,GACnD,IAAI,IAAI5B,EAAM,EAAGA,GAAO0B,EAAgB1B,KACnC2B,QAAQZ,KAAKlB,EAAMC,WAAW+B,OAAO/B,WAAYE,GAAOuB,KAAcA,GAAgE,IAApDI,QAAQZ,KAAKlB,EAAMC,WAAW+B,OAAOlB,KAAMX,IAChIyB,EAAKK,KAAK9B,GAIZ,OAAOyB,EAGF,SAAUM,EAA6BlC,EAAoByB,GAChE,IAAIC,EAAWC,EAAYF,GAEvBG,EAAO,GACPC,EAAiBC,QAAQZ,KAAKlB,EAAM+B,UAAW,GACnD,IAAI,IAAI5B,EAAM,EAAGA,GAAO0B,EAAgB1B,KACnC2B,QAAQZ,KAAKlB,EAAMC,WAAW+B,OAAO/B,WAAYE,GAAOuB,KAAcA,GACzEE,EAAKK,KAAK9B,GAIZ,OAAOyB,EAGF,SAAUO,EAAWC,GAC1B,OAAOA,GACN,IAAK,SACJ,OAAO,EACR,IAAK,WACJ,OAAO,EACR,IAAK,WACJ,OAAO,EACR,IAAK,SACJ,OAAO,EACR,IAAK,aACJ,OAAO,GACR,IAAK,aACJ,OAAO,GACR,IAAK,SACJ,OAAO,GACR,QACC,OAAO,GAGJ,SAAUT,EAAYF,GAC3B,IAAIC,EAAW,EAKf,OAJAD,EAAMH,SAAQc,IACbV,GAAYS,EAAWC,MAGjBV,EAGF,SAAUW,EAAapC,EAAwBE,EAAaiC,GACjE,OAAQN,QAAQZ,KAAKjB,EAAW+B,OAAO/B,WAAYE,GAAOgC,EAAWC,IAAS,EAEzE,SAAUE,EAAcrC,EAAwBE,EAAasB,GAClEK,QAAQS,GAAGtC,EAAW+B,OAAO/B,WAAYE,EAAKwB,EAAYF,IC7D7C,MAAOe,UAAgB5C,EAChC6C,YAAa,OAAO1C,KAAKC,MAAMC,WAAWyC,WAAWD,MAAM1C,KAAKI,KAChEsC,UAAMrC,GAAOL,KAAKC,MAAMC,WAAWyC,WAAWD,MAAM1C,KAAKI,KAAOC,EAChEuC,YAAa,OAAO5C,KAAKC,MAAMC,WAAWyC,WAAWC,MAAM5C,KAAKI,KAChEwC,UAAMvC,GAAOL,KAAKC,MAAMC,WAAWyC,WAAWC,MAAM5C,KAAKI,KAAOC,EAEpEW,YAAYf,GACXgB,MAAMhB,GACNsC,EAAcvC,KAAKC,MAAMC,WAAYF,KAAKI,IAAK,CAAC,SAAU,WAAY,SAAU,eAEhFJ,KAAKwB,IAAM,UACXxB,KAAKO,MAAQ,GAAKX,EAClBI,KAAKQ,OAAS,GAAKZ,EACnBI,KAAKS,QAAU,EACfT,KAAKW,WAAa,EAClBX,KAAKY,wBAA0B,IAAQhB,EAEvCmC,QAAQc,MAAM5C,EAAMC,WAAW+B,OAAOa,KAAM9C,KAAKI,IAAK,ICf1C,SAAU2C,EAAgB9C,GACvC,MAAM0C,EAAa1C,EAAMC,WAAWyC,WAC9BK,EAAa/C,EAAMC,WAAW8C,WAC9B7C,EAAWF,EAAMC,WAAWC,SAC5B8C,EAAWhD,EAAMC,WAAW+C,SAC5BvC,EAAST,EAAMC,WAAWQ,OAEhC,MAAO,KACN,MAAMwC,EAAa,IACnBC,WAAW1B,0BAA0BxB,EAAO,CAAC,eAAesB,SAAQ6B,IACnE,GAAGT,EAAWC,MAAMQ,GAAc,EAAG,CACpC,IAAIC,EAAUtB,QAAQuB,IAAIrD,EAAM+B,UAAW,EAAG,GAAK,EACnDmB,WAAWZ,cAActC,EAAMC,WAAYmD,EAAS,CAAC,SAAU,WAAY,SAAU,WAAY,aAAc,WAE/GtB,QAAQc,MAAM1C,EAASI,MAAO8C,EAAS,KACvCtB,QAAQc,MAAM1C,EAASK,OAAQ6C,EAAS,KACxCtB,QAAQc,MAAMnC,EAAOD,QAAS4C,EAAS,GACvCtB,QAAQc,MAAMnC,EAAOC,WAAY0C,EAAS,GAC1CtB,QAAQc,MAAMnC,EAAOE,wBAAyByC,EAAS,KACvDtB,QAAQc,MAAMI,EAASM,MAAOF,EAASH,GACvCnB,QAAQc,MAAMG,EAAWQ,MAAOH,EAASD,GAEzCrB,QAAQc,MAAM1C,EAASJ,EAAGsD,EAAStB,QAAQZ,KAAKhB,EAASJ,EAAGqD,IAC5DrB,QAAQc,MAAM1C,EAASG,EAAG+C,EAAStB,QAAQZ,KAAKhB,EAASG,EAAG8C,IAE5D,IAAIK,GAAaC,KAAKC,SAAW,IAAO,EAAI,GAAKD,KAAKC,SAAWT,EAC7DU,GAAaF,KAAKC,SAAW,IAAO,EAAI,GAAKD,KAAKC,SAAWT,EACjEnB,QAAQc,MAAMI,EAASlD,EAAGsD,EAASI,GACnC1B,QAAQc,MAAMI,EAAS3C,EAAG+C,EAASO,GACnC7B,QAAQc,MAAM1C,EAAS0D,MAAOR,EAASS,EAAaL,EAAWG,IAC/D7B,QAAQgC,IAAIpB,EAAWC,MAAOQ,EAAY,GAC1CrB,QAAQc,MAAM5C,EAAMC,WAAW+B,OAAOa,KAAMO,EAAS,QAKxD,SAASS,EAAa/D,EAAWO,GAChC,IAAI0D,EAAUN,KAAKO,MAAM3D,EAAGP,GAC5B,OAAOiE,GAAW,IAAMN,KAAKQ,KCxCjB,SAAUC,EAAelE,GACtC,MAAME,EAAWF,EAAMC,WAAWC,SAC5B8C,EAAWhD,EAAMC,WAAW+C,SAElC,OAAQmB,IACP,IAAIC,EAAQlB,WAAW1B,0BAA0BxB,EAAO,CAAC,WAAY,aACrEoE,EAAM9C,SAAQ8B,IACb,IAAII,EAAY1B,QAAQZ,KAAK8B,EAASlD,EAAGsD,GACrCO,EAAY7B,QAAQZ,KAAK8B,EAAS3C,EAAG+C,GACrCiB,EAAiBb,EAAYW,EAC7BG,EAAiBX,EAAYQ,EAC7BI,EAAezC,QAAQuB,IAAInD,EAASJ,EAAGsD,EAASiB,GAAkBA,EAClEG,EAAe1C,QAAQuB,IAAInD,EAASG,EAAG+C,EAASkB,GAAkBA,GAEnEC,EAAe,GAAKA,EAAqC,IAArBvE,EAAMyE,OAAOnE,SACnDwB,QAAQc,MAAMI,EAASlD,EAAGsD,GAAUI,GACpC1B,QAAQc,MAAM1C,EAAS0D,MAAOR,EAASS,GAAcL,EAAWG,MAG9Da,EAAe,GAAKA,EAAsC,IAAtBxE,EAAMyE,OAAOlE,UACnDuB,QAAQc,MAAMI,EAAS3C,EAAG+C,GAAUO,GACpC7B,QAAQc,MAAM1C,EAAS0D,MAAOR,EAASS,EAAaL,GAAYG,SAKnE,SAASE,EAAa/D,EAAWO,GAChC,IAAI0D,EAAUN,KAAKO,MAAM3D,EAAGP,GAC5B,OAAOiE,GAAW,IAAMN,KAAKQ,KD7B/Bf,WAAW1B,0BAA4BA,EACvC0B,WAAWZ,cAAgBA,ECF3BY,WAAW1B,0BAA4BA,E,wBCOzB,SAAUkD,EAAgB1E,GACvC,MAAME,EAAWF,EAAMC,WAAWC,SAC5B8C,EAAWhD,EAAMC,WAAW+C,SAC5BD,EAAa/C,EAAMC,WAAW8C,WAC9BL,EAAa1C,EAAMC,WAAWyC,WAOpC,OALGQ,WAAWyB,gBACbzB,WAAWyB,cAAc,oFACzBzB,WAAW0B,UAAY1B,WAAW2B,SAASD,WAGrC,KAEN,IAAIE,EAAW,IAAI5B,WAAW2B,SAAS,CACtCvE,MAA4B,IAArBN,EAAMyE,OAAOnE,MACpBC,OAA8B,IAAtBP,EAAMyE,OAAOlE,SAEtB2C,WAAW1B,0BAA0BxB,EAAO,CAAC,WAAY,WAAWsB,SAAQnB,IAC3E2E,EAASC,OAAO,IAAI7B,WAAW0B,UAAU,CACxC9E,EAAGgC,QAAQZ,KAAKhB,EAASJ,EAAGK,GAC5BE,EAAGyB,QAAQZ,KAAKhB,EAASG,EAAGF,GAC5BG,MAAOwB,QAAQZ,KAAKhB,EAASI,MAAOH,GACpCI,OAAQuB,QAAQZ,KAAKhB,EAASK,OAAQJ,GACtC6E,KAAM,CACL7E,IAAAA,SAMH,IAAIiE,EAAQlB,WAAW1B,0BAA0BxB,EAAO,CAAC,aACzDoE,EAAM9C,SAAQnB,IACb,IAAI8E,EAAkBH,EAASI,SAAS,IAAIhC,WAAW0B,UAAU,CAChE9E,EAAGI,EAASJ,EAAEK,GACdE,EAAGH,EAASG,EAAEF,GACdG,MAAOJ,EAASI,MAAMH,GACtBI,OAAQL,EAASK,OAAOJ,MACrBgF,KAAKC,GAAgBA,EAAOJ,KAAK7E,MAAKkF,QAAQC,GAAqBA,IAAanF,IAChFoF,EAAY7C,EAAWD,MAAMM,EAAWQ,MAAMpD,IAC9CqF,EAAiBP,EAAgBI,QAAQC,IAE5C,GAAGpC,WAAWb,aAAarC,EAAMC,WAAYqF,EAAU,cAAe,CACrE,IAAInC,EAAaJ,EAAWQ,MAAM+B,GAClC,OAAO5C,EAAWD,MAAMU,KAAgBoC,EAGpC,QAAGrC,WAAWb,aAAarC,EAAMC,WAAYqF,EAAU,eACpD5C,EAAWD,MAAM6C,KAAcC,KAKpCE,EAAaD,EAAeH,QAAQC,GAAqBI,EAASxF,EAASJ,EAAEwF,GAAWpF,EAASG,EAAEiF,GAAWpF,EAASJ,EAAEK,GAAMD,EAASG,EAAEF,IAAQsD,KAAKkC,IAAIzF,EAASI,MAAMH,GAAMD,EAASI,MAAMgF,MAChMG,EAAWG,SACbC,EAAQzB,EAAOjE,EAAKsF,EAAW,IAE/BzC,EAASlD,EAAEK,IAAQ6C,EAASlD,EAAEK,GAC9B6C,EAAS3C,EAAEF,IAAQ6C,EAAS3C,EAAEF,GAC9BD,EAAS0D,MAAMzD,GAAO0D,EAAab,EAASlD,EAAEK,GAAM6C,EAAS3C,EAAEF,SAKlE,SAASuF,EAASI,EAAYC,EAAYC,EAAYC,GACrD,OAAOxC,KAAKyC,MAAMJ,EAAKE,IAAO,GAAKD,EAAKE,IAAO,GAGhD,SAASJ,EAAQzB,EAAsBjE,EAAagG,GACnD,IAAIC,EAAcjG,KAASiG,EAAcD,GACxC,OAGD,IAAIE,EAAa,EACdnD,WAAWb,aAAarC,EAAMC,WAAYkG,EAAQ,gBACpDE,EAAajC,EAAMiB,QAAOlF,GAAOH,EAAMC,WAAW8C,WAAWQ,MAAMpD,KAASgG,IAAQP,QAGrFU,EAAWlC,EAAOjE,EAAK,GACvBmG,EAAWlC,EAAO+B,EAAQ,GAE1B,MAAMpD,EAAa/C,EAAMC,WAAW8C,WACpC,GAAG/C,EAAMC,WAAW+B,OAAOlB,KAAKqF,GAAS,CACxC,IAAIhD,EAAaJ,EAAWQ,MAAMpD,GAClCH,EAAMC,WAAWyC,WAAWC,MAAMQ,IAAekD,EAElD,GAAGrG,EAAMC,WAAW+B,OAAOlB,KAAKX,GAE/B,GAAG+C,WAAWb,aAAarC,EAAMC,WAAYkG,EAAQ,cAAe,CACnE,IAAIhD,EAAaJ,EAAWQ,MAAM4C,GAClCnG,EAAMC,WAAWyC,WAAWC,MAAMQ,IAAe,OAG1CD,WAAWb,aAAarC,EAAMC,WAAYkG,EAAQ,gBACzDnG,EAAMC,WAAWyC,WAAWC,MAAMwD,IAAW,GAIhD,SAASG,EAAWlC,EAAsBjE,EAAaoG,GACtD,MAAM9F,EAAST,EAAMC,WAAWQ,OAGhC,GAFAA,EAAOD,QAAQL,IAAQoG,EACvB9F,EAAOI,qBAAqBV,GAAO,EAChCM,EAAOD,QAAQL,GAAO,IACxBH,EAAMC,WAAW+B,OAAOlB,KAAKX,GAAO,EAEjC+C,WAAWb,aAAarC,EAAMC,WAAYE,EAAK,eAAe,CAChE,IAAIqG,EAAkBpC,EAAMiB,QAAOjC,GAAWpD,EAAMC,WAAW8C,WAAWQ,MAAMH,KAAajD,IAC7FqG,EAAgBlF,SAAQ8B,IACvBpD,EAAMC,WAAW+B,OAAOlB,KAAKsC,GAAW,MAM5C,SAASgD,EAAcjG,GACtB,OAAO2B,QAAQZ,KAAKlB,EAAMC,WAAWQ,OAAOI,qBAAsBV,IAAQ,IAG3E,SAAS0D,EAAa/D,EAAWO,GAChC,IAAI0D,EAAUN,KAAKO,MAAM3D,EAAGP,GAC5B,OAAOiE,GAAW,IAAMN,KAAKQ,KC5HjB,SAAUwC,EAAyBzG,GAChD,MAAMS,EAAST,EAAMC,WAAWQ,OAEhC,OAAQ0D,IACPjB,WAAW1B,0BAA0BxB,EAAO,CAAC,WAAWsB,SAAQnB,IAC/D2B,QAAQuB,IAAI5C,EAAOI,qBAAsBV,EAAa,IAARgE,GAE3CrC,QAAQZ,KAAKT,EAAOD,QAASL,GAAO2B,QAAQZ,KAAKT,EAAOC,WAAYP,KACtE2B,QAAQuB,IAAI5C,EAAOG,4BAA6BT,EAAa,IAARgE,GAClDrC,QAAQZ,KAAKT,EAAOG,4BAA6BT,GAAO2B,QAAQZ,KAAKT,EAAOE,wBAAyBR,KACvG2B,QAAQuB,IAAI5C,EAAOD,QAASL,EAAK,GACjC2B,QAAQc,MAAMnC,EAAOG,4BAA6BT,EAAK,SCX9C,SAAUuG,EAAmB1G,GAC1C,MAAME,EAAWF,EAAMC,WAAWC,SAC5B8C,EAAWhD,EAAMC,WAAW+C,SAC5B2D,EAAS3G,EAAMC,WAAW0G,OAEhC,MAAO,KACNzD,WAAW1B,0BAA0BxB,EAAO,CAAC,WAAY,WAAWsB,SAAQnB,IAC3E,IAAIgG,EAASQ,EAAOR,OAAOhG,GAC3B,IAAIgG,GAAUnG,EAAMC,WAAW+B,OAAOlB,KAAKqF,GAC1C,OAGD,IAAIS,EAAQC,EAAoB1G,EAAKgG,GACjCW,EAAwBC,EAAUjF,QAAQZ,KAAK8B,EAASlD,EAAGK,GAAiB,EAAVyG,EAAM9G,EAAOgC,QAAQZ,KAAK8B,EAAS3C,EAAGF,GAAiB,EAAVyG,EAAMvG,GACrH2G,EAAc,CACjBlH,EAAGgH,EAAsBhH,EAAIkD,EAASM,MAAMnD,GAC5CE,EAAGyG,EAAsBzG,EAAI2C,EAASM,MAAMnD,IAG7C2B,QAAQc,MAAMI,EAASlD,EAAGK,EAAK6G,EAAYlH,GAC3CgC,QAAQc,MAAMI,EAAS3C,EAAGF,EAAK6G,EAAY3G,GAC3CyB,QAAQc,MAAM1C,EAAS0D,MAAOzD,EAAK0D,EAAamD,EAAYlH,EAAGkH,EAAY3G,QAI7E,SAASwG,EAAoB1G,EAAamF,GACzC,OAAOyB,EAAUjF,QAAQZ,KAAKhB,EAASJ,EAAGwF,GAAYxD,QAAQZ,KAAKhB,EAASJ,EAAGK,GAAM2B,QAAQZ,KAAKhB,EAASG,EAAGiF,GAAYxD,QAAQZ,KAAKhB,EAASG,EAAGF,IAGpJ,SAAS0D,EAAa/D,EAAWO,GAChC,IAAI0D,EAAUN,KAAKO,MAAM3D,EAAGP,GAC5B,OAAOiE,GAAW,IAAMN,KAAKQ,IAG9B,SAAS8C,EAAUjH,EAAWO,GAC7B,IAAI4G,EAAMnH,EAAIA,EAAIO,EAAIA,EACtB,OAAG4G,EAAM,GACRA,EAAM,EAAIxD,KAAKyC,KAAKe,GAEb,CACNnH,EAAGA,EAAImH,EACP5G,EAAGA,EAAI4G,IAGD,CACNnH,EAAAA,EACAO,EAAAA,ICzCU,SAAU6G,EAAkBlH,GACzC,MAAME,EAAWF,EAAMC,WAAWC,SAC5B6C,EAAa/C,EAAMC,WAAW8C,WAC9BL,EAAa1C,EAAMC,WAAWyC,WAC9BiE,EAAS3G,EAAMC,WAAW0G,OAOhC,OALGzD,WAAWyB,gBACbzB,WAAWyB,cAAc,oFACzBzB,WAAW0B,UAAY1B,WAAW2B,SAASD,WAGrC,KAEN,IAAIE,EAAW,IAAI5B,WAAW2B,SAAS,CACtCvE,MAA4B,IAArBN,EAAMyE,OAAOnE,MACpBC,OAA8B,IAAtBP,EAAMyE,OAAOlE,SAEtB2C,WAAW1B,0BAA0BxB,EAAO,CAAC,WAAY,WAAWsB,SAAQnB,IAC3E,IAAI6E,EAAO,CACVlF,EAAGgC,QAAQZ,KAAKhB,EAASJ,EAAGK,GAC5BE,EAAGyB,QAAQZ,KAAKhB,EAASG,EAAGF,GAC5BG,MAAOwB,QAAQZ,KAAKhB,EAASI,MAAOH,GACpCI,OAAQuB,QAAQZ,KAAKhB,EAASK,OAAQJ,IAGvC2E,EAASC,OAAO,IAAI7B,WAAW0B,UAAU,IACrCI,EACHA,KAAM,CACL7E,IAAAA,KACG6E,SAMN9B,WAAW1B,0BAA0BxB,EAAO,CAAC,WAAY,WAAWsB,SAAQnB,IAC3E,IAAIoF,EAAYzD,QAAQZ,KAAKwB,EAAWD,MAAOX,QAAQZ,KAAK6B,EAAWQ,MAAOpD,IAC1EL,EAAIgC,QAAQZ,KAAKhB,EAASJ,EAAGK,GAC7BE,EAAIyB,QAAQZ,KAAKhB,EAASG,EAAGF,GAC7BG,EAAQwB,QAAQZ,KAAKhB,EAASI,MAAOH,GACrCI,EAASuB,QAAQZ,KAAKhB,EAASK,OAAQJ,GAGvCgH,EAAO,CACVrH,EAAGA,EAAI,IACPO,EAAGA,EAAI,IACPC,MAAOA,EAAQ,IACfC,OAAQA,EAAS,KAEd6G,EAAUC,EAAkBvC,EAAUqC,EAAMhH,EAAKoF,GAC/B,IAAnB6B,EAAQxB,SACVuB,EAAKrH,GAAK,IACVqH,EAAK9G,GAAK,IACV8G,EAAK7G,OAAS,IACd6G,EAAK5G,QAAU,IACf6G,EAAUC,EAAkBvC,EAAUqC,EAAMhH,EAAKoF,IAGlD6B,EAAQE,MAAK,CAACC,EAAGC,IACTC,EAAkBF,EAAEzH,EAAGyH,EAAElH,EAAGP,EAAGO,GAAKoH,EAAkBD,EAAE1H,EAAG0H,EAAEnH,EAAGP,EAAGO,KAE3E,IAAIqH,EAAQN,EAAQ,IAAM,KAG1B,IAAIM,EAAO,CACV,IAAIC,EAAWzE,WAAW1B,0BAA0BxB,EAAO,CAAC,eAAeqF,QAAOlC,GAAcrB,QAAQZ,KAAKwB,EAAWD,MAAOU,KAAgBoC,IAAcvF,EAAMC,WAAW+B,OAAOlB,KAAKqC,KAC1LwE,EAASL,MAAK,CAACC,EAAGC,IACVC,EAAkB3F,QAAQZ,KAAKhB,EAASJ,EAAGyH,GAAIzF,QAAQZ,KAAKhB,EAASG,EAAGkH,GAAIzH,EAAGO,GAAKoH,EAAkB3F,QAAQZ,KAAKhB,EAASJ,EAAG0H,GAAI1F,QAAQZ,KAAKhB,EAASG,EAAGmH,GAAI1H,EAAGO,KAGxKsH,EAAS/B,SACX8B,EAAQ,CACPvH,IAAKwH,EAAS,GACd7H,EAAG,EACHO,EAAG,EACHC,MAAO,EACPC,OAAQ,IAKRmH,EACF5F,QAAQc,MAAM+D,EAAOR,OAAQhG,EAAKuH,EAAMvH,KAExC2B,QAAQc,MAAM+D,EAAOR,OAAQhG,EAAK,OAKrC,SAASkH,EAAkBvC,EAAe8C,EAAgEzH,EAAaoF,GACtH,IAAIN,EAAkBH,EAASI,SAAS,IAAIhC,WAAW0B,UAAUgD,IAAQzC,KAAKC,GAAgBA,EAAOJ,OAErG,OADAC,EAAkBA,EAAgBI,QAAOL,GAAQA,EAAK7E,MAAQA,IACvD8E,EAAgBI,QAAOL,IAE7B,GAAG9B,WAAWb,aAAarC,EAAMC,WAAY+E,EAAK7E,IAAK,cAAe,CACrE,IAAIgD,EAAarB,QAAQZ,KAAK6B,EAAWQ,MAAOyB,EAAK7E,KACrD,OAAO2B,QAAQZ,KAAKwB,EAAWD,MAAOU,KAAgBoC,EAGlD,QAAGrC,WAAWb,aAAarC,EAAMC,WAAY+E,EAAK7E,IAAK,eACpD2B,QAAQZ,KAAKwB,EAAWD,MAAOuC,EAAK7E,OAASoF,KAOvD,SAASkC,EAAkB3B,EAAYC,EAAYC,EAAYC,GAC9D,OAAQH,EAAKE,IAAO,GAAKD,EAAKE,IAAO,GHjHvC/C,WAAW1B,0BAA4BA,EACvC0B,WAAWb,aAAeA,EAC1Ba,WAAW2B,SAAWA,EAAAA,EACtB3B,WAAW0B,UAAYA,EAAAA,ECLvB1B,WAAW1B,0BAA4BA,ECAvC0B,WAAW1B,0BAA4BA,ECEvC0B,WAAW1B,0BAA4BA,EACvC0B,WAAWb,aAAeA,EAC1Ba,WAAW2B,SAAWA,EAAAA,EACtB3B,WAAW0B,UAAYA,EAAAA,ECKT,MAAOiD,UAAchI,EAAAA,aAWlCkB,cACCC,SADD,qBAPI,CAAEV,MAAO,EAAGC,OAAQ,KAOxB,yFAJ0C,KAI1C,4BAHgD,KAGhD,sBAFyB,IAIxBR,KAAKgC,UAAYhC,KAAK+H,mBAAmB,GAEzC/H,KAAKE,WAAa,CACjB+B,OAAQ,CACP/B,WAAYF,KAAK+H,qBACjBjF,KAAM9C,KAAK+H,qBACXhH,KAAMf,KAAK+H,sBAEZ5H,SAAU,CACTJ,EAAGC,KAAK+H,qBACRzH,EAAGN,KAAK+H,qBACRxH,MAAOP,KAAK+H,qBACZvH,OAAQR,KAAK+H,qBACblE,MAAO7D,KAAK+H,sBAEb9E,SAAU,CACTlD,EAAGC,KAAK+H,qBACRzH,EAAGN,KAAK+H,qBACRxE,MAAOvD,KAAK+H,sBAEbrH,OAAQ,CACPD,QAAST,KAAK+H,qBACdpH,WAAYX,KAAK+H,qBACjBnH,wBAAyBZ,KAAK+H,qBAC9BlH,4BAA6Bb,KAAK+H,qBAClCjH,qBAAsBd,KAAK+H,sBAE5BpF,WAAY,CACXD,MAAO1C,KAAK+H,qBACZnF,MAAO5C,KAAK+H,sBAEb/E,WAAY,CACXQ,MAAOxD,KAAK+H,sBAEbnB,OAAQ,CACPR,OAAQpG,KAAK+H,uBAIf/H,KAAKgI,gBAAgBjF,GACrB/C,KAAKgI,gBAAgB7D,GAErBnE,KAAKgI,gBAAgBrD,GACrB3E,KAAKgI,gBAAgBtB,GAErB1G,KAAKgI,gBAAgBb,GACrBnH,KAAKgI,gBAAgBrB,GAGdoB,mBAAmBE,EAAO,OACjC,IAAIC,EAAS,IAAIC,kBAAkBF,EAAOG,WAAWC,mBACrD,OAAO,IAAID,WAAWF,GAGvB/G,KAAKC,GACJA,EAAOkH,SAAS/G,SAASgH,IACxB,IAAItG,EACJ,OAAOsG,EAAalG,MACnB,IAAK,UACJJ,EAAS,IAAIQ,EAAQzC,MACrB,MACD,QACCiC,EAAS,IAAIpC,EAAOG,MACpB,MAEFiC,EAAOd,KAAKoH,MAGVnH,EAAOsD,SACT1E,KAAK0E,OAAStD,EAAOsD,QAGtB1E,KAAKwI,QAAQjH,SAAQkH,IACpBA,EAAOC,YAAY,CAClBC,YAAa,CACZjE,OAAQ1E,KAAK0E,aAMjBxD,QACC,OAAOa,QAAQuB,IAAItD,KAAKgC,UAAW,EAAG,GAAK,EAG5C4G,OAAOxE,GACNpE,KAAK6I,QAAQtH,SAAQuH,IACpBA,EAAO1E,MAIT2E,UAAUC,EAAcJ,GACvB5I,KAAK6I,QAAQ3G,MAAMkC,IAClB,IAAI6E,EAAQC,YAAYC,MACxBP,EAAOxE,GACPpE,KAAKoJ,cAAcJ,GAAM9G,KAAKgH,YAAYC,MAAQF,MAEnDjJ,KAAKoJ,cAAcJ,GAAQ,GAE5BhB,gBAAgBqB,GACf,IAAIC,EAAeD,EAAKL,KACpBO,EAAe,qBAIjB,KACC,IAAItJ,EAEA6I,EAAU1E,IAAoBoF,QAAQC,KAAK,gCAE/CC,KAAKC,UAAY,SAASC,GACzB,GAAGA,EAAE3E,KAAKhF,MAAO,CAChB,IAAIqJ,EAAeM,EAAE3E,KAAKqE,aAC1BrJ,EAAQ2J,EAAE3E,KAAKhF,MAEf6I,EAASY,KAAKJ,GAAcrJ,QACnB2J,EAAE3E,KAAK0D,YAChBtH,OAAOC,KAAKsI,EAAE3E,KAAK0D,aAAapH,SAAQC,IACvCvB,EAAMuB,GAAOoI,EAAE3E,KAAK0D,YAAYnH,MAExBoI,EAAE3E,KAAKb,QAChB0E,EAAOc,EAAE3E,KAAKb,OAEdsF,KAAKhB,YAAY,CAChBmB,MAAM,QAIPC,8BAIHT,EAAKS,mBACLrI,EAA0BqI,mBAC1B1H,EAAW0H,mBACXlI,EAAYkI,mBACZxH,EAAawH,mBACbvH,EAAcuH,aAEZb,EAAQ,EACRc,EAAe,EACfC,EAAO,IAAIC,KAAK,CAACV,GAAe,CAAElH,KAAM,oBACxCoG,EAAS,IAAIyB,OAAOC,OAAOC,IAAIC,gBAAgBL,IACnDhK,KAAK6I,QAAQ3G,MAAMkC,IAEf6E,EACFc,GAAgB3F,GAIjB6E,EAAQC,YAAYC,MACpBV,EAAOC,YAAY,CAClBtE,MAAOA,EAAQ2F,IAEhBA,EAAe,MAGhB,IAAI3I,EAAsB,CACzBY,UAAWhC,KAAKgC,UAChB0C,OAAQ1E,KAAK0E,OACbxE,WAAYF,KAAKE,YAElBF,KAAKoJ,cAAcE,GAAgB,GAEnCb,EAAOC,YAAY,CAClBY,aAAAA,EACArJ,MAAOmB,IAERqH,EAAOkB,UAAaC,IAChBA,EAAE3E,KAAK4E,OACT7J,KAAKoJ,cAAcE,GAAcpH,KAAKgH,YAAYC,MAAQF,GAC1DA,EAAQ,IAGVjJ,KAAKwI,QAAQtG,KAAKuG,GAGnB6B,UACCtK,KAAKwI,QAAQjH,SAAQkH,IACpBA,EAAO8B,eAERvK,KAAKwI,QAAU,IC5MjB,MAAMgC,EAAeC,KAAMC,EAAAA,EAAAA,IAAa,mBAAmBD,EAAEA,KAAIE,EAAAA,EAAAA,MAAcF,GACzEG,EAAa,CAAEC,MAAO,QACtBC,EAAa,CAAED,MAAO,QACtBE,EAAa,CAAEC,MAAO,CAAC,MAAQ,QAC/BC,EAA2BT,GAAa,KAAmBU,EAAAA,EAAAA,GAAoB,IAAK,KAAM,MAAO,KACjGC,EAA2BX,GAAa,KAAmBU,EAAAA,EAAAA,GAAoB,MAAO,CAAEE,GAAI,kCAAoC,MAAO,KAU7I,OAA4BC,EAAAA,EAAAA,IAAiB,CAC3CC,MAAMC,GAER,IAAItL,EAAQ,IAAI6H,EAChB,MAAM0D,GAAgBC,EAAAA,EAAAA,IAAI,GACpBC,GAAgBD,EAAAA,EAAAA,IAAI,GACpBE,GAAgBF,EAAAA,EAAAA,IAAI,GACpBG,GAAgBH,EAAAA,EAAAA,IAAI,GACpBI,GAAaJ,EAAAA,EAAAA,IAAI,GACjBK,GAAeL,EAAAA,EAAAA,IAAI,IACnBrC,GAAgBqC,EAAAA,EAAAA,IAAI,IAE1B,IAAIM,EA2KJ,SAASC,IACRvK,EAA0BxB,EAAO,CAAC,eAAesB,SAAQnB,IACxDH,EAAMC,WAAWyC,WAAWC,MAAMxC,IAAQ,MAI5C,OAhLA6L,EAAAA,EAAAA,KAAU,KACT,IAAIC,EAAc,EACdC,EAA6B,GAEjC,MAAM5L,EAAQ4J,OAAOiC,WAAa,EAAI,EAChC5L,EAAS2J,OAAOkC,YAAc,EAAI,EACxC,IAAIC,GAAS,EACb,MAAMC,EAAe,IAAIC,IACzB,IAAIlJ,EACJyI,EAAO,IAAIU,IAAAA,MAAY,CACtBpK,KAAMoK,IAAAA,KACNlM,MAAAA,EACAC,OAAAA,EACAkM,OAAQ,iCAERC,MAAO,CACNC,UACC5M,KAAKmB,KAAK0L,MAAM,OAAQ,YACxB7M,KAAKmB,KAAK0L,MAAM,UAAW,eAC3B7M,KAAKmB,KAAK0L,MAAM,SAAU,gBAE3BC,SACCxJ,EAAMtD,KAAKsD,IACXrD,EAAMkB,MAAK4L,EAAAA,EAAAA,GAAc,CACxBnF,SAAU,GACVoF,gBAAiB,IACjBzM,MAAAA,EACAC,OAAAA,KAGD,IAAIoH,EAAWnG,EAA0BxB,EAAO,CAAC,eACjD6L,EAAamB,MAAQrF,EAASxC,KAAIhF,IACjC,IAAIsC,EAAQzC,EAAMC,WAAWyC,WAAWD,MAAMtC,GAC1C8M,EAAe,IAAMxK,EAAMoH,SAAS,IAKxC,MAJoB,YAAjBoD,IACFA,EAAe,UAGT,CACN9M,IAAAA,EACAsC,MAAAA,EACAwK,aAAAA,EACA7I,MAAO,MAITrE,KAAKmN,MAAMC,SAASC,GAAG,iBAAiB,KACvCf,GAAUA,KAGXjL,OAAOC,KAAKrB,EAAMmJ,eAAe7H,SAAQ+L,IACxClE,EAAc6D,MAAM/K,KAAK,CACxB8G,KAAMsE,EACNC,IAAI,EACJC,IAAK,EACL5H,IAAK,QAIRgD,OAAO6E,EAAcrJ,GACpB,GAAGkI,EACF,OAGD,IAAIrD,EAAQC,YAAYC,MACxBlJ,EAAM2I,OAAOxE,GAEb,IAAIjE,EAAWF,EAAMC,WAAWC,SAChCgC,EAA6BlC,EAAO,CAAC,WAAY,WAAWsB,SAAQnB,IACnE,IAAIyM,EAAQN,EAAamB,IAAItN,GAC7B,GAAGH,EAAMC,WAAW+B,OAAOlB,KAAKX,GAC5ByM,IACFA,EAAMvC,UACNuC,EAAMc,YAAYrD,UAClBiC,EAAaqB,OAAOxN,QAEf,CACN,IAAIyM,EAAO,CACV,GAAuD,IAApD9K,QAAQZ,KAAKlB,EAAMC,WAAW+B,OAAOa,KAAM1C,GAC7C,OASD,GANAyM,EAAQvJ,EAAIuJ,MAAM,EAAG,EAAGvK,EAAarC,EAAMC,WAAYE,EAAK,cAAgB,UAAY,QAExFyM,EAAMgB,SAAS1N,EAASI,MAAMH,GAAOyM,EAAMtM,MAAQX,EAAsBO,EAASK,OAAOJ,GAAOyM,EAAMrM,OAASZ,GAC/GiN,EAAMc,YAAcrK,EAAIuJ,MAAM,EAAG,EAAG,UACpCA,EAAMc,YAAYE,SAAS1N,EAASI,MAAMH,GAAOyM,EAAMc,YAAYpN,MAAQX,EAAuB,EAAEO,EAASK,OAAOJ,GAAOyM,EAAMc,YAAYnN,OAASZ,EAAuB,GAE1K0C,EAAarC,EAAMC,WAAYE,EAAK,cACtCyM,EAAMiB,QAAQ/L,QAAQZ,KAAKlB,EAAMC,WAAWyC,WAAWD,MAAOtC,SACxD,GAAGkC,EAAarC,EAAMC,WAAYE,EAAK,cAAe,CAC5D,IAAIgD,EAAarB,QAAQZ,KAAKlB,EAAMC,WAAW8C,WAAWQ,MAAOpD,GACjEyM,EAAMiB,QAAQ/L,QAAQZ,KAAKlB,EAAMC,WAAWyC,WAAWD,MAAOU,IAE/DmJ,EAAawB,IAAI3N,EAAKyM,GAGvBA,EAAM9M,EAAI8M,EAAMc,YAAY5N,EAAKE,EAAMC,WAAWC,SAASJ,EAAEK,GAAOR,EACpEiN,EAAMvM,EAAIuM,EAAMc,YAAYrN,EAAKL,EAAMC,WAAWC,SAASG,EAAEF,GAAOR,EACpEiN,EAAMhJ,MAAQgJ,EAAMc,YAAY9J,MAAQ5D,EAAMC,WAAWC,SAAS0D,MAAMzD,GAExEyM,EAAMc,YAAYK,QAAU/N,EAAMC,WAAWQ,OAAOD,QAAQL,GAAO,MAGrE,IAAI6N,EAAM/E,YAAYC,MAItB,GAFAgD,EAAYjK,KAAK+L,EAAMhF,GACvBiD,GAAe9H,EACZ8H,EAActM,EAAsB,CACtC4L,EAAcyB,MAAQd,EAAY+B,QAAO,CAACX,EAAKE,IACvC/J,KAAK6J,IAAIA,EAAKE,IACnB,KACH/B,EAAcuB,MAAQd,EAAY+B,QAAO,CAACtI,EAAK6H,IACvC/J,KAAKkC,IAAIA,EAAK6H,IACnB,GACH9B,EAAcsB,MAAQd,EAAY+B,QAAO,CAACC,EAAOV,IACzCU,EAAQV,GACb,GAAKtB,EAAYtG,OACpBsG,EAAc,GACdD,EAAc,EAEd,IAAItE,EAAWnG,EAA0BxB,EAAO,CAAC,eAC7CoE,EAAQ5C,EAA0BxB,EAAO,CAAC,eAC9C2L,EAAcqB,MAAQrF,EAAS/B,OAC/BgG,EAAWoB,MAAQ5I,EAAMwB,OAEzBiG,EAAamB,MAAM1L,SAAQlB,IAC1B,IAAI+N,EAAqBxG,EAASyG,MAAKjO,GAAOH,EAAMC,WAAWyC,WAAWD,MAAMtC,KAASC,EAAIqC,aACnE4L,IAAvBF,EACF/N,EAAIgE,MAAQA,EAAMiB,QAAOlF,GAAOH,EAAMC,WAAW8C,WAAWQ,MAAMpD,KAASC,EAAID,MAAKyF,OAC3ExF,EAAIgE,MAAQ,IAErBhE,EAAIgE,MAAQ,MAId+E,EAAc6D,MAAQ,GACtB5L,OAAOC,KAAKrB,EAAMmJ,eAAe7H,SAAQ+L,IACxC,IAAIiB,EAAUtO,EAAMmJ,cAAckE,GAElClE,EAAc6D,MAAM/K,KAAK,CACxB8G,KAAMsE,EACNC,IAAKgB,EAAQL,QAAO,CAACX,EAAKE,IAClB/J,KAAK6J,IAAIA,EAAKE,IACnB,KACHD,IAAKe,EAAQL,QAAO,CAACC,EAAOV,IACpBU,EAAQV,GACb,GAAKc,EAAQ1I,OAChBD,IAAK2I,EAAQL,QAAO,CAACtI,EAAK6H,IAClB/J,KAAKkC,IAAIA,EAAK6H,IACnB,KAGJxN,EAAMmJ,cAAckE,GAAc,eAOxCkB,EAAAA,EAAAA,KAAgB,KACZzC,IACFA,EAAKzB,UACLyB,EAAO,MAEL9L,GACFA,EAAMqK,aAUD,CAACmE,EAAUC,MACRC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAOhE,EAAY,EAC3DM,EAAAA,EAAAA,GAAoB,MAAOJ,EAAY,EACrCI,EAAAA,EAAAA,GAAoB,MAAOH,EAAY,gBAAiB8D,EAAAA,EAAAA,IAAiBnD,EAAcuB,MAAM6B,QAAQ,IAAM,MAAOD,EAAAA,EAAAA,IAAiBlD,EAAcsB,MAAM6B,QAAQ,IAAM,WAAY,KAChLH,EAAAA,EAAAA,KAAW,IAAOC,EAAAA,EAAAA,IAAoBG,EAAAA,GAAW,MAAMC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAO7F,IAAiBN,KAClF6F,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO,CAC/CpN,IAAKsH,EAAOE,OACX6F,EAAAA,EAAAA,IAAiB/F,EAAOE,MAAQ,MAAO6F,EAAAA,EAAAA,IAAiB/F,EAAOlD,IAAIkJ,QAAQ,IAAM,MAAOD,EAAAA,EAAAA,IAAiB/F,EAAO0E,IAAIsB,QAAQ,IAAM,WAAY,MAC/I,MACJ7D,GACAC,EAAAA,EAAAA,GAAoB,MAAO,KAAM,cAAe2D,EAAAA,EAAAA,IAAiBjD,EAAcqB,OAAS,kBAAmB4B,EAAAA,EAAAA,IAAiBhD,EAAWoB,OAAS,SAAU,KACzJ0B,EAAAA,EAAAA,KAAW,IAAOC,EAAAA,EAAAA,IAAoBG,EAAAA,GAAW,MAAMC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,IAAOnD,IAAgBoD,KACjFP,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,OAAQ,CAChD/D,MAAO,eACPrJ,IAAK0N,EAAQxM,MACbsI,OAAOmE,EAAAA,EAAAA,IAAgB,CAAEzM,MAAOwM,EAAQhC,iBACvC2B,EAAAA,EAAAA,IAAiB,IAAMK,EAAQxM,MAAMoH,SAAS,KAAO,MAAO+E,EAAAA,EAAAA,IAAiBK,EAAQ7K,OAAQ,MAC9F,OACJ6G,EAAAA,EAAAA,GAAoB,MAAO,KAAM,EAC/BA,EAAAA,EAAAA,GAAoB,SAAU,CAAEkE,QAASpD,GAAY,iBAGzDb,Q,QC/NJ,MAAMkE,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE","sources":["webpack://ecs-arraybuffer/./src/multithreaded/constants.ts","webpack://ecs-arraybuffer/./src/multithreaded/entities/entity.ts","webpack://ecs-arraybuffer/./src/multithreaded/components/get-entities.ts","webpack://ecs-arraybuffer/./src/multithreaded/entities/station.ts","webpack://ecs-arraybuffer/./src/multithreaded/systems/spawn-ship-system.ts","webpack://ecs-arraybuffer/./src/multithreaded/systems/velocity-system.ts","webpack://ecs-arraybuffer/./src/multithreaded/systems/collision-system.ts","webpack://ecs-arraybuffer/./src/multithreaded/systems/update-health-timers-system.ts","webpack://ecs-arraybuffer/./src/multithreaded/systems/move-to-target-system.ts","webpack://ecs-arraybuffer/./src/multithreaded/systems/target-enemy-system.ts","webpack://ecs-arraybuffer/./src/multithreaded/entities/world.ts","webpack://ecs-arraybuffer/./node_modules/vue-loader/dist/index.js","webpack://ecs-arraybuffer/./src/multithreaded/MultithreadedGame.vue"],"sourcesContent":["export const INT_FLOAT_MULTIPLIER = 1_000.0;","import { EventEmitter } from 'eventemitter3';\nimport { INT_FLOAT_MULTIPLIER } from '../constants';\nimport World from './world';\n\nexport default class Entity extends EventEmitter {\n\tworld: World;\n\teid: number;\n\n\t// Position\n\tget x()    { return this.world.components.position.x[this.eid]; }\n\tset x(val) { this.world.components.position.x[this.eid] = val; }\n\tget y()    { return this.world.components.position.y[this.eid]; }\n\tset y(val) { this.world.components.position.y[this.eid] = val; }\n\tget width()    { return this.world.components.position.width[this.eid]; }\n\tset width(val) { this.world.components.position.width[this.eid] = val; }\n\tget height()    { return this.world.components.position.height[this.eid]; }\n\tset height(val) { this.world.components.position.height[this.eid] = val; }\n\n\t// Health\n\tget shields()    { return this.world.components.health.shields[this.eid]; }\n\tset shields(val) { this.world.components.health.shields[this.eid] = val; }\n\tget maxShields()    { return this.world.components.health.maxShields[this.eid]; }\n\tset maxShields(val) { this.world.components.health.maxShields[this.eid] = val; }\n\tget timeToRegenerateShields()    { return this.world.components.health.timeToRegenerateShields[this.eid]; }\n\tset timeToRegenerateShields(val) { this.world.components.health.timeToRegenerateShields[this.eid] = val; }\n\tget timeSinceShieldRegeneration()    { return this.world.components.health.timeSinceShieldRegeneration[this.eid]; }\n\tset timeSinceShieldRegeneration(val) { this.world.components.health.timeSinceShieldRegeneration[this.eid] = val; }\n\tget timeSinceTakenDamage()    { return this.world.components.health.timeSinceTakenDamage[this.eid]; }\n\tset timeSinceTakenDamage(val) { this.world.components.health.timeSinceTakenDamage[this.eid] = val; }\n\tget dead()    { return this.world.components.health.shields[this.eid]; }\n\tset dead(val) { this.world.components.health.shields[this.eid] = val; }\n\n\ttype = 'entity';\n\tkey = 'boid';\n\n\tconstructor(world: World) {\n\t\tsuper();\n\t\tthis.eid = world.getId();\n\t\tthis.world = world;\n\n\t\tthis.shields = 1;\n\t\tthis.maxShields = 1;\n\t\tthis.timeToRegenerateShields = 1;\n\t\tthis.timeSinceShieldRegeneration = 0;\n\t\tthis.timeSinceTakenDamage = 0;\n\t\tthis.dead = 0;\n\t}\n\n\tload(config: any) {\n\t\t// TODO: Need a way which does not rely on manually setup get/set.  Maybe in our own system define how it is serialized as part of the component registration?\n\t\tObject.keys(config).forEach((key: string) => {\n\t\t\tif(key === 'x' || key === 'y') {\n\t\t\t\tthis[key] = config[key] * INT_FLOAT_MULTIPLIER;\n\t\t\t} else {\n\t\t\t\t// @ts-expect-error\n\t\t\t\tthis[key] = config[key];\n\t\t\t}\n\t\t});\n\t}\n}","import WorldConfig from '../entities/world-config';\nimport Components from './components';\n\n// NOTE: All of these have to live in a single file in order to make sure that inlining them into the web worker doesn't try to reference dynamic __WEBPACK_IMPORT\n// Components and WorldConfig can live separately since they are just type hints that get stripped from the js code anyways\nexport function getEntitiesWithComponents(world: WorldConfig, types: Array<string>) {\n\tlet typeBits = getTypeBits(types);\n\n\tlet eids = [];\n\tlet currentCounter = Atomics.load(world.idCounter, 0);\n\tfor(let eid = 0; eid <= currentCounter; eid++) {\n\t\tif((Atomics.load(world.components.entity.components, eid) & typeBits) === typeBits && Atomics.load(world.components.entity.dead, eid) === 0) {\n\t\t\teids.push(eid);\n\t\t}\n\t}\n\n\treturn eids;\n}\n\nexport function getAllEntitiesWithComponents(world: WorldConfig, types: Array<string>) {\n\tlet typeBits = getTypeBits(types);\n\n\tlet eids = [];\n\tlet currentCounter = Atomics.load(world.idCounter, 0);\n\tfor(let eid = 0; eid <= currentCounter; eid++) {\n\t\tif((Atomics.load(world.components.entity.components, eid) & typeBits) === typeBits) {\n\t\t\teids.push(eid);\n\t\t}\n\t}\n\n\treturn eids;\n}\n\nexport function getTypeBit(type: string): number {\n\tswitch(type) {\n\t\tcase 'entity':\n\t\t\treturn 1;\n\t\tcase 'position':\n\t\t\treturn 2 ** 1;\n\t\tcase 'velocity':\n\t\t\treturn 2 ** 2;\n\t\tcase 'health':\n\t\t\treturn 2 ** 3;\n\t\tcase 'controller':\n\t\t\treturn 2 ** 4;\n\t\tcase 'controlled':\n\t\t\treturn 2 ** 5;\n\t\tcase 'attack':\n\t\t\treturn 2 ** 6;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n}\nexport function getTypeBits(types: Array<string>): number {\n\tlet typeBits = 0;\n\ttypes.forEach(type => {\n\t\ttypeBits |= getTypeBit(type);\n\t});\n\n\treturn typeBits;\n}\n\nexport function hasComponent(components: Components, eid: number, type: string) {\n\treturn (Atomics.load(components.entity.components, eid) & getTypeBit(type)) > 0;\n}\nexport function addComponents(components: Components, eid: number, types: Array<string>) {\n\tAtomics.or(components.entity.components, eid, getTypeBits(types));\n}","import { addComponents } from '../components/get-entities';\nimport { INT_FLOAT_MULTIPLIER } from '../constants';\nimport Entity from './entity';\nimport World from './world';\n\nexport default class Station extends Entity {\n\tget color()    { return this.world.components.controller.color[this.eid]; }\n\tset color(val) { this.world.components.controller.color[this.eid] = val; }\n\tget money()    { return this.world.components.controller.money[this.eid]; }\n\tset money(val) { this.world.components.controller.money[this.eid] = val; }\n\n\tconstructor(world: World) {\n\t\tsuper(world);\n\t\taddComponents(this.world.components, this.eid, ['entity', 'position', 'health', 'controller']);\n\n\t\tthis.key = 'station';\n\t\tthis.width = 20 * INT_FLOAT_MULTIPLIER;\n\t\tthis.height = 20 * INT_FLOAT_MULTIPLIER;\n\t\tthis.shields = 2;\n\t\tthis.maxShields = 2;\n\t\tthis.timeToRegenerateShields = 5_000 * INT_FLOAT_MULTIPLIER;\n\n\t\tAtomics.store(world.components.entity.init, this.eid, 1);\n\t}\n}","import Components from '../components/components';\nimport { addComponents, getEntitiesWithComponents } from '../components/get-entities';\nimport WorldConfig from '../entities/world-config';\n\nglobalThis.getEntitiesWithComponents = getEntitiesWithComponents;\nglobalThis.addComponents = addComponents;\n\nexport default function spawnShipSystem(world: WorldConfig) {\n\tconst controller = world.components.controller;\n\tconst controlled = world.components.controlled;\n\tconst position = world.components.position;\n\tconst velocity = world.components.velocity;\n\tconst health = world.components.health;\n\n\treturn () => {\n\t\tconst SHIP_SPEED = 100;\n\t\tglobalThis.getEntitiesWithComponents(world, ['controller']).forEach(stationEid => {\n\t\t\tif(controller.money[stationEid] > 0) {\n\t\t\t\tlet shipEid = Atomics.add(world.idCounter, 0, 1) + 1;\n\t\t\t\tglobalThis.addComponents(world.components, shipEid, ['entity', 'position', 'health', 'velocity', 'controlled', 'attack']);\n\n\t\t\t\tAtomics.store(position.width, shipEid, 10 * 1_000);\n\t\t\t\tAtomics.store(position.height, shipEid, 5 * 1_000);\n\t\t\t\tAtomics.store(health.shields, shipEid, 1);\n\t\t\t\tAtomics.store(health.maxShields, shipEid, 1);\n\t\t\t\tAtomics.store(health.timeToRegenerateShields, shipEid, 1_000 * 1_000);\n\t\t\t\tAtomics.store(velocity.speed, shipEid, SHIP_SPEED);\n\t\t\t\tAtomics.store(controlled.owner, shipEid, stationEid);\n\n\t\t\t\tAtomics.store(position.x, shipEid, Atomics.load(position.x, stationEid));\n\t\t\t\tAtomics.store(position.y, shipEid, Atomics.load(position.y, stationEid));\n\n\t\t\t\tlet velocityX = (Math.random() > 0.5 ? -1 : 1) * Math.random() * SHIP_SPEED;\n\t\t\t\tlet velocityY = (Math.random() > 0.5 ? -1 : 1) * Math.random() * SHIP_SPEED;\n\t\t\t\tAtomics.store(velocity.x, shipEid, velocityX);\n\t\t\t\tAtomics.store(velocity.y, shipEid, velocityY);\n\t\t\t\tAtomics.store(position.angle, shipEid, computeAngle(velocityX, velocityY));\n\t\t\t\tAtomics.sub(controller.money, stationEid, 1);\n\t\t\t\tAtomics.store(world.components.entity.init, shipEid, 1);\n\t\t\t}\n\t\t});\n\t};\n\n\tfunction computeAngle(x: number, y: number) {\n\t\tlet radians = Math.atan2(y, x);\n\t\treturn radians * (180 / Math.PI);\n\t}\n}\n\ndeclare global {\n\t// eslint-disable-next-line\n\tvar getEntitiesWithComponents: (world: any, types: Array<string>) => Array<number>;\n\t// eslint-disable-next-line\n\tvar addComponents: (components: Components, eid: number, types: Array<string>) => void;\n}","import { getEntitiesWithComponents } from '../components/get-entities';\nimport WorldConfig from '../entities/world-config';\n\nglobalThis.getEntitiesWithComponents = getEntitiesWithComponents;\n\nexport default function velocitySystem(world: WorldConfig) {\n\tconst position = world.components.position;\n\tconst velocity = world.components.velocity;\n\n\treturn (delta: number) => {\n\t\tlet ships = globalThis.getEntitiesWithComponents(world, ['position', 'velocity']);\n\t\tships.forEach(shipEid => {\n\t\t\tlet velocityX = Atomics.load(velocity.x, shipEid);\n\t\t\tlet velocityY = Atomics.load(velocity.y, shipEid);\n\t\t\tlet deltaVelocityX = velocityX * delta;\n\t\t\tlet deltaVelocityY = velocityY * delta;\n\t\t\tlet newPositionX = Atomics.add(position.x, shipEid, deltaVelocityX) + deltaVelocityX;\n\t\t\tlet newPositionY = Atomics.add(position.y, shipEid, deltaVelocityY) + deltaVelocityY;\n\n\t\t\tif(newPositionX < 0 || newPositionX > (world.bounds.width * 1_000)) {\n\t\t\t\tAtomics.store(velocity.x, shipEid, -velocityX);\n\t\t\t\tAtomics.store(position.angle, shipEid, computeAngle(-velocityX, velocityY));\n\t\t\t}\n\t\n\t\t\tif(newPositionY < 0 || newPositionY > (world.bounds.height * 1_000)) {\n\t\t\t\tAtomics.store(velocity.y, shipEid, -velocityY);\n\t\t\t\tAtomics.store(position.angle, shipEid, computeAngle(velocityX, -velocityY));\n\t\t\t}\n\t\t});\n\t};\n\n\tfunction computeAngle(x: number, y: number) {\n\t\tlet radians = Math.atan2(y, x);\n\t\treturn radians * (180 / Math.PI);\n\t}\n}\n\ndeclare global {\n\t// eslint-disable-next-line\n\tvar getEntitiesWithComponents: (world: any, types: Array<string>) => Array<number>;\n}","import { Quadtree, Rectangle } from '@timohausmann/quadtree-ts/src/index.esm';\nimport { getEntitiesWithComponents, hasComponent } from '../components/get-entities';\nimport Components from '../components/components';\nimport WorldConfig from '../entities/world-config';\n\nglobalThis.getEntitiesWithComponents = getEntitiesWithComponents;\nglobalThis.hasComponent = hasComponent;\nglobalThis.Quadtree = Quadtree;\nglobalThis.Rectangle = Rectangle;\n\nexport default function collisionSystem(world: WorldConfig) {\n\tconst position = world.components.position;\n\tconst velocity = world.components.velocity;\n\tconst controlled = world.components.controlled;\n\tconst controller = world.components.controller;\n\n\tif(globalThis.importScripts) {\n\t\tglobalThis.importScripts('https://cdn.jsdelivr.net/npm/@timohausmann/quadtree-ts/dist/quadtree.umd.full.js');\n\t\tglobalThis.Rectangle = globalThis.Quadtree.Rectangle;\n\t}\n\n\treturn () => {\n\t\t// Create and populate quadtree\n\t\tlet quadtree = new globalThis.Quadtree({\n\t\t\twidth: world.bounds.width * 1_000,\n\t\t\theight: world.bounds.height * 1_000\n\t\t});\n\t\tglobalThis.getEntitiesWithComponents(world, ['position', 'health']).forEach(eid => {\n\t\t\tquadtree.insert(new globalThis.Rectangle({\n\t\t\t\tx: Atomics.load(position.x, eid),\n\t\t\t\ty: Atomics.load(position.y, eid),\n\t\t\t\twidth: Atomics.load(position.width, eid),\n\t\t\t\theight: Atomics.load(position.height, eid),\n\t\t\t\tdata: {\n\t\t\t\t\teid\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\t// Use quadtree to see who we are colliding with\n\t\tlet ships = globalThis.getEntitiesWithComponents(world, ['velocity']);\n\t\tships.forEach(eid => {\n\t\t\tlet entitiesInRange = quadtree.retrieve(new globalThis.Rectangle({\n\t\t\t\tx: position.x[eid],\n\t\t\t\ty: position.y[eid],\n\t\t\t\twidth: position.width[eid],\n\t\t\t\theight: position.height[eid]\n\t\t\t})).map((result: any) => result.data.eid).filter((otherEid: number) => otherEid !== eid);\n\t\t\tlet shipColor = controller.color[controlled.owner[eid]];\n\t\t\tlet enemiesInRange = entitiesInRange.filter((otherEid: number) => {\n\t\t\t\t// Ship\n\t\t\t\tif(globalThis.hasComponent(world.components, otherEid, 'controlled')) {\n\t\t\t\t\tlet stationEid = controlled.owner[otherEid];\n\t\t\t\t\treturn controller.color[stationEid] !== shipColor;\n\t\t\t\t}\n\t\t\t\t// Station\n\t\t\t\telse if(globalThis.hasComponent(world.components, otherEid, 'controller')) {\n\t\t\t\t\treturn controller.color[otherEid] !== shipColor;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlet collisions = enemiesInRange.filter((otherEid: number) => distance(position.x[otherEid], position.y[otherEid], position.x[eid], position.y[eid]) < Math.max(position.width[eid], position.width[otherEid]));\n\t\t\tif(collisions.length) {\n\t\t\t\tcollide(ships, eid, collisions[0]);\n\n\t\t\t\tvelocity.x[eid] = -velocity.x[eid];\n\t\t\t\tvelocity.y[eid] = -velocity.y[eid];\n\t\t\t\tposition.angle[eid] = computeAngle(velocity.x[eid], velocity.y[eid]);\n\t\t\t}\n\t\t});\n\t};\n\n\tfunction distance(x1: number, y1: number, x2: number, y2: number): number {\n\t\treturn Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n\t}\n\n\tfunction collide(ships: Array<number>, eid: number, target: number) {\n\t\tif(!canTakeDamage(eid) || !canTakeDamage(target)) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tlet enemyWorth = 1;\n\t\tif(globalThis.hasComponent(world.components, target, 'controller')) {\n\t\t\tenemyWorth = ships.filter(eid => world.components.controlled.owner[eid] === target).length;\n\t\t}\n\t\n\t\ttakeDamage(ships, eid, 1);\n\t\ttakeDamage(ships, target, 1);\n\t\n\t\tconst controlled = world.components.controlled;\n\t\tif(world.components.entity.dead[target]) {\n\t\t\tlet stationEid = controlled.owner[eid];\n\t\t\tworld.components.controller.money[stationEid] += enemyWorth;\n\t\t}\n\t\tif(world.components.entity.dead[eid]) {\n\t\t\t// Ship\n\t\t\tif(globalThis.hasComponent(world.components, target, 'controlled')) {\n\t\t\t\tlet stationEid = controlled.owner[target];\n\t\t\t\tworld.components.controller.money[stationEid] += 1;\n\t\t\t}\n\t\t\t// Station\n\t\t\telse if(globalThis.hasComponent(world.components, target, 'controller')) {\n\t\t\t\tworld.components.controller.money[target] += 1;\n\t\t\t}\n\t\t}\n\t}\n\tfunction takeDamage(ships: Array<number>, eid: number, damage: number) {\n\t\tconst health = world.components.health;\n\t\thealth.shields[eid] -= damage;\n\t\thealth.timeSinceTakenDamage[eid] = 0;\n\t\tif(health.shields[eid] < 0) {\n\t\t\tworld.components.entity.dead[eid] = 1;\n\t\n\t\t\tif(globalThis.hasComponent(world.components, eid, 'controller')) {\n\t\t\t\tlet controlledShips = ships.filter(shipEid => world.components.controlled.owner[shipEid] === eid);\n\t\t\t\tcontrolledShips.forEach(shipEid => {\n\t\t\t\t\tworld.components.entity.dead[shipEid] = 1;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction canTakeDamage(eid: number) {\n\t\treturn Atomics.load(world.components.health.timeSinceTakenDamage, eid) >= 200 * 1_000;\n\t}\n\n\tfunction computeAngle(x: number, y: number) {\n\t\tlet radians = Math.atan2(y, x);\n\t\treturn radians * (180 / Math.PI);\n\t}\n}\n\ndeclare global {\n\t// eslint-disable-next-line\n\tvar getEntitiesWithComponents: (world: any, types: Array<string>) => Array<number>;\n\t// eslint-disable-next-line\n\tvar hasComponent: (components: Components, eid: number, type: string) => boolean;\n\t// eslint-disable-next-line\n\tvar Quadtree: any;\n\t// eslint-disable-next-line\n\tvar Rectangle: any;\n\t// eslint-disable-next-line\n\tvar importScripts: any;\n}","import { getEntitiesWithComponents } from '../components/get-entities';\nimport WorldConfig from '../entities/world-config';\n\nglobalThis.getEntitiesWithComponents = getEntitiesWithComponents;\n\nexport default function updateHealthTimersSystem(world: WorldConfig) {\n\tconst health = world.components.health;\n\n\treturn (delta: number) => {\n\t\tglobalThis.getEntitiesWithComponents(world, ['health']).forEach(eid => {\n\t\t\tAtomics.add(health.timeSinceTakenDamage, eid, delta * 1_000);\n\n\t\t\tif(Atomics.load(health.shields, eid) < Atomics.load(health.maxShields, eid)) {\n\t\t\t\tAtomics.add(health.timeSinceShieldRegeneration, eid, delta * 1_000);\n\t\t\t\tif(Atomics.load(health.timeSinceShieldRegeneration, eid) > Atomics.load(health.timeToRegenerateShields, eid)) {\n\t\t\t\t\tAtomics.add(health.shields, eid, 1);\n\t\t\t\t\tAtomics.store(health.timeSinceShieldRegeneration, eid, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n}\n\ndeclare global {\n\t// eslint-disable-next-line\n\tvar getEntitiesWithComponents: (world: any, types: Array<string>) => Array<number>;\n}","import { getEntitiesWithComponents } from '../components/get-entities';\nimport WorldConfig from '../entities/world-config';\n\nglobalThis.getEntitiesWithComponents = getEntitiesWithComponents;\n\nexport default function moveToTargetSystem(world: WorldConfig) {\n\tconst position = world.components.position;\n\tconst velocity = world.components.velocity;\n\tconst attack = world.components.attack;\n\n\treturn () => {\n\t\tglobalThis.getEntitiesWithComponents(world, ['velocity', 'attack']).forEach(eid => {\n\t\t\tlet target = attack.target[eid];\n\t\t\tif(!target || world.components.entity.dead[target]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet force = getMoveTowardsForce(eid, target);\n\t\t\tlet newNormalizedVelocity = normalize(Atomics.load(velocity.x, eid) + force.x * 4, Atomics.load(velocity.y, eid) + force.y * 4);\n\t\t\tlet newVelocity = {\n\t\t\t\tx: newNormalizedVelocity.x * velocity.speed[eid],\n\t\t\t\ty: newNormalizedVelocity.y * velocity.speed[eid]\n\t\t\t};\n\n\t\t\tAtomics.store(velocity.x, eid, newVelocity.x);\n\t\t\tAtomics.store(velocity.y, eid, newVelocity.y);\n\t\t\tAtomics.store(position.angle, eid, computeAngle(newVelocity.x, newVelocity.y));\n\t\t});\n\t};\n\n\tfunction getMoveTowardsForce(eid: number, otherEid: number) {\n\t\treturn normalize(Atomics.load(position.x, otherEid) - Atomics.load(position.x, eid), Atomics.load(position.y, otherEid) - Atomics.load(position.y, eid));\n\t}\n\n\tfunction computeAngle(x: number, y: number) {\n\t\tlet radians = Math.atan2(y, x);\n\t\treturn radians * (180 / Math.PI);\n\t}\n\n\tfunction normalize(x: number, y: number) {\n\t\tlet len = x * x + y * y;\n\t\tif(len > 0) {\n\t\t\tlen = 1 / Math.sqrt(len);\n\n\t\t\treturn {\n\t\t\t\tx: x * len,\n\t\t\t\ty: y * len\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tx,\n\t\t\t\ty\n\t\t\t};\n\t\t}\n\t}\n}\n\ndeclare global {\n\t// eslint-disable-next-line\n\tvar getEntitiesWithComponents: (world: any, types: Array<string>) => Array<number>;\n}","import { Quadtree, Rectangle } from '@timohausmann/quadtree-ts/src/index.esm';\nimport { getEntitiesWithComponents, hasComponent } from '../components/get-entities';\nimport Components from '../components/components';\nimport WorldConfig from '../entities/world-config';\n\nglobalThis.getEntitiesWithComponents = getEntitiesWithComponents;\nglobalThis.hasComponent = hasComponent;\nglobalThis.Quadtree = Quadtree;\nglobalThis.Rectangle = Rectangle;\n\nexport default function targetEnemySystem(world: WorldConfig) {\n\tconst position = world.components.position;\n\tconst controlled = world.components.controlled;\n\tconst controller = world.components.controller;\n\tconst attack = world.components.attack;\n\n\tif(globalThis.importScripts) {\n\t\tglobalThis.importScripts('https://cdn.jsdelivr.net/npm/@timohausmann/quadtree-ts/dist/quadtree.umd.full.js');\n\t\tglobalThis.Rectangle = globalThis.Quadtree.Rectangle;\n\t}\n\n\treturn () => {\n\t\t// Create and populate quadtree\n\t\tlet quadtree = new globalThis.Quadtree({\n\t\t\twidth: world.bounds.width * 1_000,\n\t\t\theight: world.bounds.height * 1_000\n\t\t});\n\t\tglobalThis.getEntitiesWithComponents(world, ['position', 'health']).forEach(eid => {\n\t\t\tlet data = {\n\t\t\t\tx: Atomics.load(position.x, eid),\n\t\t\t\ty: Atomics.load(position.y, eid),\n\t\t\t\twidth: Atomics.load(position.width, eid),\n\t\t\t\theight: Atomics.load(position.height, eid)\n\t\t\t};\n\n\t\t\tquadtree.insert(new globalThis.Rectangle({\n\t\t\t\t...data,\n\t\t\t\tdata: {\n\t\t\t\t\teid,\n\t\t\t\t\t...data\n\t\t\t\t}\n\t\t\t}));\n\t\t});\n\n\t\t// TODO: Don't wait a full 200ms to process ships that are just sitting there waiting\n\t\tglobalThis.getEntitiesWithComponents(world, ['velocity', 'attack']).forEach(eid => {\n\t\t\tlet shipColor = Atomics.load(controller.color, Atomics.load(controlled.owner, eid));\n\t\t\tlet x = Atomics.load(position.x, eid);\n\t\t\tlet y = Atomics.load(position.y, eid);\n\t\t\tlet width = Atomics.load(position.width, eid);\n\t\t\tlet height = Atomics.load(position.height, eid);\n\n\t\t\t// Try to find the nearest enemy\n\t\t\tlet rect = {\n\t\t\t\tx: x - 50 * 1_000,\n\t\t\t\ty: y - 50 * 1_000,\n\t\t\t\twidth: width + 100 * 1_000,\n\t\t\t\theight: height + 100 * 1_000\n\t\t\t};\n\t\t\tlet enemies = getEnemiesInRange(quadtree, rect, eid, shipColor);\n\t\t\tif(enemies.length === 0) {\n\t\t\t\trect.x -= 100 * 1_000;\n\t\t\t\trect.y -= 100 * 1_000;\n\t\t\t\trect.width += 200 * 1_000;\n\t\t\t\trect.height += 200 * 1_000;\n\t\t\t\tenemies = getEnemiesInRange(quadtree, rect, eid, shipColor);\n\t\t\t}\n\t\n\t\t\tenemies.sort((a, b) => {\n\t\t\t\treturn euclideanDistance(a.x, a.y, x, y) - euclideanDistance(b.x, b.y, x, y);\n\t\t\t});\n\t\t\tlet enemy = enemies[0] ?? null;\n\n\t\t\t// If no enemies that quadtree could easily find, just head for the nearest station\n\t\t\tif(!enemy) {\n\t\t\t\tlet stations = globalThis.getEntitiesWithComponents(world, ['controller']).filter(stationEid => Atomics.load(controller.color, stationEid) !== shipColor && !world.components.entity.dead[stationEid]);\n\t\t\t\tstations.sort((a, b) => {\n\t\t\t\t\treturn euclideanDistance(Atomics.load(position.x, a), Atomics.load(position.y, a), x, y) - euclideanDistance(Atomics.load(position.x, b), Atomics.load(position.y, b), x, y);\n\t\t\t\t});\n\n\t\t\t\tif(stations.length) {\n\t\t\t\t\tenemy = {\n\t\t\t\t\t\teid: stations[0],\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\twidth: 0,\n\t\t\t\t\t\theight: 0\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(enemy) {\n\t\t\t\tAtomics.store(attack.target, eid, enemy.eid);\n\t\t\t} else {\n\t\t\t\tAtomics.store(attack.target, eid, 0);\n\t\t\t}\n\t\t});\n\t};\n\n\tfunction getEnemiesInRange(quadtree: any, range: { x: number, y: number, width: number, height: number }, eid: number, shipColor: number) : Array<QuadtreeData> {\n\t\tlet entitiesInRange = quadtree.retrieve(new globalThis.Rectangle(range)).map((result: any) => result.data) as Array<QuadtreeData>;\n\t\tentitiesInRange = entitiesInRange.filter(data => data.eid !== eid);\n\t\treturn entitiesInRange.filter(data => {\n\t\t\t// Ship\n\t\t\tif(globalThis.hasComponent(world.components, data.eid, 'controlled')) {\n\t\t\t\tlet stationEid = Atomics.load(controlled.owner, data.eid);\n\t\t\t\treturn Atomics.load(controller.color, stationEid) !== shipColor;\n\t\t\t}\n\t\t\t// Station\n\t\t\telse if(globalThis.hasComponent(world.components, data.eid, 'controller')) {\n\t\t\t\treturn Atomics.load(controller.color, data.eid) !== shipColor;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction euclideanDistance(x1: number, y1: number, x2: number, y2: number): number {\n\t\treturn (x1 - x2) ** 2 + (y1 - y2) ** 2;\n\t}\n\n\tinterface QuadtreeData {\n\t\teid: number;\n\t\tx: number;\n\t\ty: number;\n\t\twidth: number;\n\t\theight: number\n\t}\n}\n\ndeclare global {\n\t// eslint-disable-next-line\n\tvar getEntitiesWithComponents: (world: any, types: Array<string>) => Array<number>;\n\t// eslint-disable-next-line\n\tvar hasComponent: (components: Components, eid: number, type: string) => boolean;\n\t// eslint-disable-next-line\n\tvar Quadtree: any;\n\t// eslint-disable-next-line\n\tvar Rectangle: any;\n\t// eslint-disable-next-line\n\tvar importScripts: any;\n}","import Entity from './entity';\nimport { EventEmitter } from 'eventemitter3';\nimport Station from './station';\nimport spawnShipSystem from '../systems/spawn-ship-system';\nimport velocitySystem from '../systems/velocity-system';\nimport collisionSystem from '../systems/collision-system';\nimport updateHealthTimersSystem from '../systems/update-health-timers-system';\nimport moveToTargetSystem from '../systems/move-to-target-system';\nimport targetEnemySystem from '../systems/target-enemy-system';\nimport Components from '../components/components';\nimport WorldConfig from './world-config';\nimport { getEntitiesWithComponents, getTypeBit, getTypeBits, hasComponent, addComponents } from '../components/get-entities';\n\nexport default class World extends EventEmitter {\n\tbounds: {\n\t\twidth: number,\n\t\theight: number\n\t} = { width: 0, height: 0 };\n\tidCounter: Int32Array;\n\tcomponents: Components;\n\tsystems: Array<(delta: number) => void> = [];\n\tsystemUpdates: { [s: string]: Array<number> } = {};\n\tworkers: Array<Worker> = [];\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.idCounter = this.createIntegerArray(4);\n\n\t\tthis.components = {\n\t\t\tentity: {\n\t\t\t\tcomponents: this.createIntegerArray(),\n\t\t\t\tinit: this.createIntegerArray(),\n\t\t\t\tdead: this.createIntegerArray()\n\t\t\t},\n\t\t\tposition: {\n\t\t\t\tx: this.createIntegerArray(),\n\t\t\t\ty: this.createIntegerArray(),\n\t\t\t\twidth: this.createIntegerArray(),\n\t\t\t\theight: this.createIntegerArray(),\n\t\t\t\tangle: this.createIntegerArray()\n\t\t\t},\n\t\t\tvelocity: {\n\t\t\t\tx: this.createIntegerArray(),\n\t\t\t\ty: this.createIntegerArray(),\n\t\t\t\tspeed: this.createIntegerArray()\n\t\t\t},\n\t\t\thealth: {\n\t\t\t\tshields: this.createIntegerArray(),\n\t\t\t\tmaxShields: this.createIntegerArray(),\n\t\t\t\ttimeToRegenerateShields: this.createIntegerArray(),\n\t\t\t\ttimeSinceShieldRegeneration: this.createIntegerArray(),\n\t\t\t\ttimeSinceTakenDamage: this.createIntegerArray()\n\t\t\t},\n\t\t\tcontroller: {\n\t\t\t\tcolor: this.createIntegerArray(),\n\t\t\t\tmoney: this.createIntegerArray()\n\t\t\t},\n\t\t\tcontrolled: {\n\t\t\t\towner: this.createIntegerArray()\n\t\t\t},\n\t\t\tattack: {\n\t\t\t\ttarget: this.createIntegerArray()\n\t\t\t}\n\t\t};\n\n\t\tthis.addSystemWorker(spawnShipSystem);\n\t\tthis.addSystemWorker(velocitySystem);\n\t\t// TODO: Shard into 2 collision threads\n\t\tthis.addSystemWorker(collisionSystem);\n\t\tthis.addSystemWorker(updateHealthTimersSystem);\n\t\t// TODO: Shard into 2-4 targeting threads\n\t\tthis.addSystemWorker(targetEnemySystem);\n\t\tthis.addSystemWorker(moveToTargetSystem);\n\t}\n\t// TODO: Resize buffers as we grow in size and recycle dead ids instead of requiring such a ridiculously huge buffer\n\tprivate createIntegerArray(size = 65_536) {\n\t\tlet buffer = new SharedArrayBuffer(size * Int32Array.BYTES_PER_ELEMENT);\n\t\treturn new Int32Array(buffer);\n\t}\n\n\tload(config: any) {\n\t\tconfig.entities.forEach((entityConfig: any) => {\n\t\t\tlet entity;\n\t\t\tswitch(entityConfig.type) {\n\t\t\t\tcase 'station':\n\t\t\t\t\tentity = new Station(this);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tentity = new Entity(this);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tentity.load(entityConfig);\n\t\t});\n\n\t\tif(config.bounds) {\n\t\t\tthis.bounds = config.bounds;\n\t\t}\n\n\t\tthis.workers.forEach(worker => {\n\t\t\tworker.postMessage({\n\t\t\t\tupdateWorld: {\n\t\t\t\t\tbounds: this.bounds\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetId() {\n\t\treturn Atomics.add(this.idCounter, 0, 1) + 1;\n\t}\n\n\tupdate(delta: number) {\n\t\tthis.systems.forEach(system => {\n\t\t\tsystem(delta);\n\t\t});\n\t}\n\n\taddSystem(name: string, update: (delta: number) => void) {\n\t\tthis.systems.push((delta: number) => {\n\t\t\tlet start = performance.now();\n\t\t\tupdate(delta);\n\t\t\tthis.systemUpdates[name].push(performance.now() - start);\n\t\t});\n\t\tthis.systemUpdates[name] = [];\n\t}\n\taddSystemWorker(func: any) {\n\t\tlet functionName = func.name;\n\t\tlet inlineString = `\n\n\t\t(\n\t\t\t${\n\t\t\t\t(() => {\n\t\t\t\t\tlet world: any;\n\t\t\t\t\t// eslint-disable-next-line\n\t\t\t\t\tlet system = (delta: number) => { console.warn('Updating system before sent'); };\n\n\t\t\t\t\tself.onmessage = function(e) {\n\t\t\t\t\t\tif(e.data.world) {\n\t\t\t\t\t\t\tlet functionName = e.data.functionName;\n\t\t\t\t\t\t\tworld = e.data.world;\n\t\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\t\tsystem = self[functionName](world);\n\t\t\t\t\t\t} else if(e.data.updateWorld) {\n\t\t\t\t\t\t\tObject.keys(e.data.updateWorld).forEach(key => {\n\t\t\t\t\t\t\t\tworld[key] = e.data.updateWorld[key];\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if(e.data.delta) {\n\t\t\t\t\t\t\tsystem(e.data.delta);\n\n\t\t\t\t\t\t\tself.postMessage({\n\t\t\t\t\t\t\t\tdone: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}).toString()\n\t\t\t}\n\t\t)()\n\n\t\t${func.toString()}\n\t\t${getEntitiesWithComponents.toString()}\n\t\t${getTypeBit.toString()}\n\t\t${getTypeBits.toString()}\n\t\t${hasComponent.toString()}\n\t\t${addComponents.toString()}`;\n\n\t\tlet start = 0;\n\t\tlet missedDeltas = 0;\n\t\tlet blob = new Blob([inlineString], { type: 'text/javascript' });\n\t\tlet worker = new Worker(window.URL.createObjectURL(blob));\n\t\tthis.systems.push((delta) => {\n\t\t\t// We don't want to try to update while it is still executing the last update\n\t\t\tif(start) {\n\t\t\t\tmissedDeltas += delta;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstart = performance.now();\n\t\t\tworker.postMessage({\n\t\t\t\tdelta: delta + missedDeltas\n\t\t\t});\n\t\t\tmissedDeltas = 0;\n\t\t});\n\n\t\tlet config: WorldConfig = {\n\t\t\tidCounter: this.idCounter,\n\t\t\tbounds: this.bounds,\n\t\t\tcomponents: this.components\n\t\t};\n\t\tthis.systemUpdates[functionName] = [];\n\n\t\tworker.postMessage({\n\t\t\tfunctionName,\n\t\t\tworld: config\n\t\t});\n\t\tworker.onmessage = (e) => {\n\t\t\tif(e.data.done) {\n\t\t\t\tthis.systemUpdates[functionName].push(performance.now() - start);\n\t\t\t\tstart = 0;\n\t\t\t}\n\t\t};\n\t\tthis.workers.push(worker);\n\t}\n\n\tdestroy() {\n\t\tthis.workers.forEach(worker => {\n\t\t\tworker.terminate();\n\t\t});\n\t\tthis.workers = [];\n\t}\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-53532014\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"home\" }\nconst _hoisted_2 = { class: \"list\" }\nconst _hoisted_3 = { style: {\"color\":\"red\"} }\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { id: \"phaser-container-multithreaded\" }, null, -1))\n\nimport { ref, onMounted, onBeforeUnmount, Ref } from 'vue';\nimport Phaser from 'phaser';\nimport generateScene from '@/data/generate-scene';\nimport World from './entities/world';\nimport { INT_FLOAT_MULTIPLIER } from './constants';\nimport { getAllEntitiesWithComponents, getEntitiesWithComponents, hasComponent } from './components/get-entities';\n\n\nexport default /*#__PURE__*/_defineComponent({\n  setup(__props) {\n\nlet world = new World();\nconst minUpdateTime = ref(0);\nconst maxUpdateTime = ref(0);\nconst avgUpdateTime = ref(0);\nconst stationsCount = ref(0);\nconst shipsCount = ref(0);\nconst stationShips = ref([]) as Ref<Array<{ eid: number, color: number, displayColor: string, ships: number }>>;\nconst systemUpdates = ref([]) as Ref<Array<{ name: string, min: number, avg: number, max: number }>>;\n\nlet game: Phaser.Game | null;\nonMounted(() => {\n\tlet updateTicks = 0;\n\tlet updateTimes: Array<number> = [];\n\n\tconst width = window.innerWidth / 3 * 2;\n\tconst height = window.innerHeight / 3 * 2;\n\tlet paused = false;\n\tconst eidSpriteMap = new Map<number, any>();\n\tlet add: any;\n\tgame = new Phaser.Game({\n\t\ttype: Phaser.AUTO,\n\t\twidth,\n\t\theight,\n\t\tparent: 'phaser-container-multithreaded',\n\t\t// @ts-expect-error\n\t\tscene: {\n\t\t\tpreload() {\n\t\t\t\tthis.load.image('boid', 'boid.png');\n\t\t\t\tthis.load.image('station', 'station.png');\n\t\t\t\tthis.load.image('shield', 'shield3.png');\n\t\t\t},\n\t\t\tcreate() {\n\t\t\t\tadd = this.add;\n\t\t\t\tworld.load(generateScene({\n\t\t\t\t\tstations: 10,\n\t\t\t\t\tshipsPerStation: 100,\n\t\t\t\t\twidth,\n\t\t\t\t\theight\n\t\t\t\t}));\n\n\t\t\t\tlet stations = getEntitiesWithComponents(world, ['controller']);\n\t\t\t\tstationShips.value = stations.map(eid => {\n\t\t\t\t\tlet color = world.components.controller.color[eid];\n\t\t\t\t\tlet displayColor = '#' + color.toString(16);\n\t\t\t\t\tif(displayColor === '#ffffff') {\n\t\t\t\t\t\tdisplayColor = '#00000';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\teid,\n\t\t\t\t\t\tcolor,\n\t\t\t\t\t\tdisplayColor,\n\t\t\t\t\t\tships: 0\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\tthis.input.keyboard.on('keydown-SPACE', () => {\n\t\t\t\t\tpaused = !paused;\n\t\t\t\t});\n\n\t\t\t\tObject.keys(world.systemUpdates).forEach(systemName => {\n\t\t\t\t\tsystemUpdates.value.push({\n\t\t\t\t\t\tname: systemName,\n\t\t\t\t\t\tmin:0,\n\t\t\t\t\t\tavg: 0,\n\t\t\t\t\t\tmax: 0\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tupdate(time: number, delta: number) {\n\t\t\t\tif(paused) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet start = performance.now();\n\t\t\t\tworld.update(delta);\n\n\t\t\t\tlet position = world.components.position;\n\t\t\t\tgetAllEntitiesWithComponents(world, ['position', 'health']).forEach(eid => {\n\t\t\t\t\tlet image = eidSpriteMap.get(eid);\n\t\t\t\t\tif(world.components.entity.dead[eid]) {\n\t\t\t\t\t\tif(image) {\n\t\t\t\t\t\t\timage.destroy();\n\t\t\t\t\t\t\timage.shieldImage.destroy();\n\t\t\t\t\t\t\teidSpriteMap.delete(eid);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(!image) {\n\t\t\t\t\t\t\tif(Atomics.load(world.components.entity.init, eid) === 0) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\timage = add.image(0, 0, hasComponent(world.components, eid, 'controller') ? 'station' : 'boid');\n\n\t\t\t\t\t\t\timage.setScale(position.width[eid] / image.width / INT_FLOAT_MULTIPLIER, position.height[eid] / image.height / INT_FLOAT_MULTIPLIER);\n\t\t\t\t\t\t\timage.shieldImage = add.image(0, 0, 'shield');\n\t\t\t\t\t\t\timage.shieldImage.setScale(position.width[eid] / image.shieldImage.width / INT_FLOAT_MULTIPLIER * 2,position.height[eid] / image.shieldImage.height / INT_FLOAT_MULTIPLIER * 2);\n\n\t\t\t\t\t\t\tif(hasComponent(world.components, eid, 'controller')) {\n\t\t\t\t\t\t\t\timage.setTint(Atomics.load(world.components.controller.color, eid));\n\t\t\t\t\t\t\t} else if(hasComponent(world.components, eid, 'controlled')) {\n\t\t\t\t\t\t\t\tlet stationEid = Atomics.load(world.components.controlled.owner, eid);\n\t\t\t\t\t\t\t\timage.setTint(Atomics.load(world.components.controller.color, stationEid));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\teidSpriteMap.set(eid, image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\timage.x = image.shieldImage.x = (world.components.position.x[eid] / INT_FLOAT_MULTIPLIER);\n\t\t\t\t\t\timage.y = image.shieldImage.y = (world.components.position.y[eid] / INT_FLOAT_MULTIPLIER);\n\t\t\t\t\t\timage.angle = image.shieldImage.angle = world.components.position.angle[eid];\n\t\t\t\t\t\t\n\t\t\t\t\t\timage.shieldImage.visible = world.components.health.shields[eid] > 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet end = performance.now();\n\n\t\t\t\tupdateTimes.push(end - start);\n\t\t\t\tupdateTicks += delta;\n\t\t\t\tif(updateTicks > INT_FLOAT_MULTIPLIER) {\n\t\t\t\t\tminUpdateTime.value = updateTimes.reduce((min, time) => {\n\t\t\t\t\t\treturn Math.min(min, time);\n\t\t\t\t\t}, 1_000_000);\n\t\t\t\t\tmaxUpdateTime.value = updateTimes.reduce((max, time) => {\n\t\t\t\t\t\treturn Math.max(max, time);\n\t\t\t\t\t}, 0);\n\t\t\t\t\tavgUpdateTime.value = updateTimes.reduce((total, time) => {\n\t\t\t\t\t\treturn total + time;\n\t\t\t\t\t}, 0) / updateTimes.length;\n\t\t\t\t\tupdateTimes = [];\n\t\t\t\t\tupdateTicks = 0;\n\n\t\t\t\t\tlet stations = getEntitiesWithComponents(world, ['controller']);\n\t\t\t\t\tlet ships = getEntitiesWithComponents(world, ['controlled']);\n\t\t\t\t\tstationsCount.value = stations.length;\n\t\t\t\t\tshipsCount.value = ships.length;\n\n\t\t\t\t\tstationShips.value.forEach(val => {\n\t\t\t\t\t\tlet matchingStationEid = stations.find(eid => world.components.controller.color[eid] === val.color);\n\t\t\t\t\t\tif(matchingStationEid !== undefined) {\n\t\t\t\t\t\t\tval.ships = ships.filter(eid => world.components.controlled.owner[eid] === val.eid).length;\n\t\t\t\t\t\t} else if(val.ships > 0) {\n\t\t\t\t\t\t\t// paused = true;\n\t\t\t\t\t\t\tval.ships = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tsystemUpdates.value = [];\n\t\t\t\t\tObject.keys(world.systemUpdates).forEach(systemName => {\n\t\t\t\t\t\tlet updates = world.systemUpdates[systemName];\n\n\t\t\t\t\t\tsystemUpdates.value.push({\n\t\t\t\t\t\t\tname: systemName,\n\t\t\t\t\t\t\tmin: updates.reduce((min, time) => {\n\t\t\t\t\t\t\t\treturn Math.min(min, time);\n\t\t\t\t\t\t\t}, 1_000_000),\n\t\t\t\t\t\t\tavg: updates.reduce((total, time) => {\n\t\t\t\t\t\t\t\treturn total + time;\n\t\t\t\t\t\t\t}, 0) / updates.length,\n\t\t\t\t\t\t\tmax: updates.reduce((max, time) => {\n\t\t\t\t\t\t\t\treturn Math.max(max, time);\n\t\t\t\t\t\t\t}, 0)\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tworld.systemUpdates[systemName] = [];\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n});\nonBeforeUnmount(() => {\n\tif(game) {\n\t\tgame.destroy();\n\t\tgame = null;\n\t}\n\tif(world) {\n\t\tworld.destroy();\n\t}\n});\n\nfunction addShips() {\n\tgetEntitiesWithComponents(world, ['controller']).forEach(eid => {\n\t\tworld.components.controller.money[eid] += 10;\n\t});\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"div\", _hoisted_3, \"mainThread: \" + _toDisplayString(maxUpdateTime.value.toFixed(2)) + \" (\" + _toDisplayString(avgUpdateTime.value.toFixed(2)) + \" avg) ms\", 1),\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(systemUpdates), (system) => {\n        return (_openBlock(), _createElementBlock(\"div\", {\n          key: system.name\n        }, _toDisplayString(system.name) + \": \" + _toDisplayString(system.max.toFixed(2)) + \" (\" + _toDisplayString(system.avg.toFixed(2)) + \" avg) ms\", 1))\n      }), 128)),\n      _hoisted_4,\n      _createElementVNode(\"div\", null, \"Entities: \" + _toDisplayString(stationsCount.value) + \" stations and \" + _toDisplayString(shipsCount.value) + \" ships\", 1),\n      (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(stationShips), (station) => {\n        return (_openBlock(), _createElementBlock(\"span\", {\n          class: \"station-list\",\n          key: station.color,\n          style: _normalizeStyle({ color: station.displayColor })\n        }, _toDisplayString('#' + station.color.toString(16)) + \": \" + _toDisplayString(station.ships), 5))\n      }), 128)),\n      _createElementVNode(\"div\", null, [\n        _createElementVNode(\"button\", { onClick: addShips }, \"Add Ships\")\n      ])\n    ]),\n    _hoisted_5\n  ]))\n}\n}\n\n})","import script from \"./MultithreadedGame.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./MultithreadedGame.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./MultithreadedGame.vue?vue&type=style&index=0&id=53532014&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/runner/work/ecs-arraybuffer/ecs-arraybuffer/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-53532014\"]])\n\nexport default __exports__"],"names":["INT_FLOAT_MULTIPLIER","Entity","EventEmitter","x","this","world","components","position","eid","val","y","width","height","shields","health","maxShields","timeToRegenerateShields","timeSinceShieldRegeneration","timeSinceTakenDamage","dead","constructor","super","getId","load","config","Object","keys","forEach","key","getEntitiesWithComponents","types","typeBits","getTypeBits","eids","currentCounter","Atomics","idCounter","entity","push","getAllEntitiesWithComponents","getTypeBit","type","hasComponent","addComponents","or","Station","color","controller","money","store","init","spawnShipSystem","controlled","velocity","SHIP_SPEED","globalThis","stationEid","shipEid","add","speed","owner","velocityX","Math","random","velocityY","angle","computeAngle","sub","radians","atan2","PI","velocitySystem","delta","ships","deltaVelocityX","deltaVelocityY","newPositionX","newPositionY","bounds","collisionSystem","importScripts","Rectangle","Quadtree","quadtree","insert","data","entitiesInRange","retrieve","map","result","filter","otherEid","shipColor","enemiesInRange","collisions","distance","max","length","collide","x1","y1","x2","y2","sqrt","target","canTakeDamage","enemyWorth","takeDamage","damage","controlledShips","updateHealthTimersSystem","moveToTargetSystem","attack","force","getMoveTowardsForce","newNormalizedVelocity","normalize","newVelocity","len","targetEnemySystem","rect","enemies","getEnemiesInRange","sort","a","b","euclideanDistance","enemy","stations","range","World","createIntegerArray","addSystemWorker","size","buffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","entities","entityConfig","workers","worker","postMessage","updateWorld","update","systems","system","addSystem","name","start","performance","now","systemUpdates","func","functionName","inlineString","console","warn","self","onmessage","e","done","toString","missedDeltas","blob","Blob","Worker","window","URL","createObjectURL","destroy","terminate","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","_hoisted_2","_hoisted_3","style","_hoisted_4","_createElementVNode","_hoisted_5","id","_defineComponent","setup","__props","minUpdateTime","ref","maxUpdateTime","avgUpdateTime","stationsCount","shipsCount","stationShips","game","addShips","onMounted","updateTicks","updateTimes","innerWidth","innerHeight","paused","eidSpriteMap","Map","Phaser","parent","scene","preload","image","create","generateScene","shipsPerStation","value","displayColor","input","keyboard","on","systemName","min","avg","time","get","shieldImage","delete","setScale","setTint","set","visible","end","reduce","total","matchingStationEid","find","undefined","updates","onBeforeUnmount","_ctx","_cache","_openBlock","_createElementBlock","_toDisplayString","toFixed","_Fragment","_renderList","_unref","station","_normalizeStyle","onClick","__exports__"],"sourceRoot":""}