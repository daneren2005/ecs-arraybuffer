{"version":3,"file":"js/870.3369d517.js","mappings":"yBAAc,SAAUA,EAAmBC,GAC1C,IAAIC,EAEAC,EAAUC,IAAoBC,QAAQC,KAAK,gCAE/CC,KAAKC,UAAY,SAASC,GACtBA,EAAEC,KAAKR,OACTA,EAAQO,EAAEC,KAAKR,MACfC,EAASF,EAAaC,IACbO,EAAEC,KAAKC,YAChBC,OAAOC,KAAKJ,EAAEC,KAAKC,aAAaG,SAAQC,IACvCb,EAAMa,GAAON,EAAEC,KAAKC,YAAYI,MAExBN,EAAEC,KAAKN,QAChBD,EAAOM,EAAEC,KAAKN,OAEdG,KAAKS,YAAY,CAChBC,MAAM,MCjBI,SAAUC,EAAWC,GAClC,OAAOA,GACN,IAAK,SACJ,OAAO,EACR,IAAK,WACJ,OAAO,EACR,IAAK,WACJ,OAAO,EACR,IAAK,SACJ,OAAO,EACR,IAAK,aACJ,OAAO,GACR,IAAK,aACJ,OAAO,GACR,IAAK,SACJ,OAAO,GACR,QACC,OAAO,GCfI,SAAUC,EAAYC,GACnC,IAAIC,EAAW,EAKf,OAJAD,EAAMP,SAAQK,IACbG,GAAYJ,EAAWC,MAGjBG,ECHF,SAAUC,EAA0BrB,EAAoBmB,GAC7D,IAAIC,EAAWF,EAAYC,GAEvBG,EAAO,GACPC,EAAiBC,QAAQC,KAAKzB,EAAM0B,UAAW,GACnD,IAAI,IAAIC,EAAM,EAAGA,GAAOJ,EAAgBI,KACnCH,QAAQC,KAAKzB,EAAM4B,WAAWC,OAAOD,WAAYD,GAAOP,KAAcA,GAAgE,IAApDI,QAAQC,KAAKzB,EAAM4B,WAAWC,OAAOC,KAAMH,IAChIL,EAAKS,KAAKJ,GAIZ,OAAOL,ECbM,SAAUU,EAAyBhC,GAChD,MAAMiC,EAASjC,EAAM4B,WAAWK,OAEhC,OAAQ/B,IACPmB,EAA0BrB,EAAO,CAAC,WAAWY,SAAQe,IACpDH,QAAQU,IAAID,EAAOE,qBAAsBR,EAAa,IAARzB,GAE3CsB,QAAQC,KAAKQ,EAAOG,QAAST,GAAOH,QAAQC,KAAKQ,EAAOI,WAAYV,KACtEH,QAAQU,IAAID,EAAOK,4BAA6BX,EAAa,IAARzB,GAClDsB,QAAQC,KAAKQ,EAAOK,4BAA6BX,GAAOH,QAAQC,KAAKQ,EAAOM,wBAAyBZ,KACvGH,QAAQU,IAAID,EAAOG,QAAST,EAAK,GACjCH,QAAQgB,MAAMP,EAAOK,4BAA6BX,EAAK,SCX5D7B,EAAmBkC,I","sources":["webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/systems/create-worker-system.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/components/get-type-bit.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/components/get-type-bits.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/entities/get-entities.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/systems/update-health-timers-system.ts","webpack://ecs-sharedarraybuffer-playground/./src/multithreaded/systems/update-health-timers-worker.ts"],"sourcesContent":["export default function createWorkerSystem(createSystem: (world: any) => ((delta: number) => void)) {\n\tlet world: any;\n\t// eslint-disable-next-line\n\tlet system = (delta: number) => { console.warn('Updating system before sent'); };\n\n\tself.onmessage = function(e) {\n\t\tif(e.data.world) {\n\t\t\tworld = e.data.world;\n\t\t\tsystem = createSystem(world);\n\t\t} else if(e.data.updateWorld) {\n\t\t\tObject.keys(e.data.updateWorld).forEach(key => {\n\t\t\t\tworld[key] = e.data.updateWorld[key];\n\t\t\t});\n\t\t} else if(e.data.delta) {\n\t\t\tsystem(e.data.delta);\n\n\t\t\tself.postMessage({\n\t\t\t\tdone: true\n\t\t\t});\n\t\t}\n\t};\n}","export default function getTypeBit(type: string): number {\n\tswitch(type) {\n\t\tcase 'entity':\n\t\t\treturn 1;\n\t\tcase 'position':\n\t\t\treturn 2 ** 1;\n\t\tcase 'velocity':\n\t\t\treturn 2 ** 2;\n\t\tcase 'health':\n\t\t\treturn 2 ** 3;\n\t\tcase 'controller':\n\t\t\treturn 2 ** 4;\n\t\tcase 'controlled':\n\t\t\treturn 2 ** 5;\n\t\tcase 'attack':\n\t\t\treturn 2 ** 6;\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n}","import getTypeBit from './get-type-bit';\n\nexport default function getTypeBits(types: Array<string>): number {\n\tlet typeBits = 0;\n\ttypes.forEach(type => {\n\t\ttypeBits |= getTypeBit(type);\n\t});\n\n\treturn typeBits;\n}","import WorldConfig from './world-config';\nimport getTypeBits from '../components/get-type-bits';\n\n// NOTE: All of these have to live in a single file in order to make sure that inlining them into the web worker doesn't try to reference dynamic __WEBPACK_IMPORT\n// Components and WorldConfig can live separately since they are just type hints that get stripped from the js code anyways\nexport function getEntitiesWithComponents(world: WorldConfig, types: Array<string>) {\n\tlet typeBits = getTypeBits(types);\n\n\tlet eids = [];\n\tlet currentCounter = Atomics.load(world.idCounter, 0);\n\tfor(let eid = 0; eid <= currentCounter; eid++) {\n\t\tif((Atomics.load(world.components.entity.components, eid) & typeBits) === typeBits && Atomics.load(world.components.entity.dead, eid) === 0) {\n\t\t\teids.push(eid);\n\t\t}\n\t}\n\n\treturn eids;\n}\n\nexport function getAllEntitiesWithComponents(world: WorldConfig, types: Array<string>) {\n\tlet typeBits = getTypeBits(types);\n\n\tlet eids = [];\n\tlet currentCounter = Atomics.load(world.idCounter, 0);\n\tfor(let eid = 0; eid <= currentCounter; eid++) {\n\t\tif((Atomics.load(world.components.entity.components, eid) & typeBits) === typeBits) {\n\t\t\teids.push(eid);\n\t\t}\n\t}\n\n\treturn eids;\n}","import { getEntitiesWithComponents } from '../entities/get-entities';\nimport WorldConfig from '../entities/world-config';\n\nexport default function updateHealthTimersSystem(world: WorldConfig) {\n\tconst health = world.components.health;\n\n\treturn (delta: number) => {\n\t\tgetEntitiesWithComponents(world, ['health']).forEach(eid => {\n\t\t\tAtomics.add(health.timeSinceTakenDamage, eid, delta * 1_000);\n\n\t\t\tif(Atomics.load(health.shields, eid) < Atomics.load(health.maxShields, eid)) {\n\t\t\t\tAtomics.add(health.timeSinceShieldRegeneration, eid, delta * 1_000);\n\t\t\t\tif(Atomics.load(health.timeSinceShieldRegeneration, eid) > Atomics.load(health.timeToRegenerateShields, eid)) {\n\t\t\t\t\tAtomics.add(health.shields, eid, 1);\n\t\t\t\t\tAtomics.store(health.timeSinceShieldRegeneration, eid, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n}","import createWorkerSystem from './create-worker-system';\nimport updateHealthTimersSystem from './update-health-timers-system';\n\ncreateWorkerSystem(updateHealthTimersSystem);"],"names":["createWorkerSystem","createSystem","world","system","delta","console","warn","self","onmessage","e","data","updateWorld","Object","keys","forEach","key","postMessage","done","getTypeBit","type","getTypeBits","types","typeBits","getEntitiesWithComponents","eids","currentCounter","Atomics","load","idCounter","eid","components","entity","dead","push","updateHealthTimersSystem","health","add","timeSinceTakenDamage","shields","maxShields","timeSinceShieldRegeneration","timeToRegenerateShields","store"],"sourceRoot":""}